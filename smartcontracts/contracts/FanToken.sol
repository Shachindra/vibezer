// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol";

contract FanToken is ERC1155Supply {
    string public name;
    string public symbol;

    address public accessMasterAddress;

    uint256 private _nextTokenId;
    uint8 public constant version = 1;
    // Optional mapping for token URIs
    mapping(uint256 => string) private _tokenURIs;

    event RewardTokenCreated(
        uint256 indexed tokenID,
        address indexed creator,
        uint256 indexed amount,
        string metadatauri
    );

    event RewardTokenMinted(
        uint256 indexed tokenID,
        address indexed creator,
        uint256 indexed amount
    );
    event RewardTokenDestroyed(uint indexed tokenId, address ownerOrApproved);

    /**
     * @dev Grants `FLOW_ADMIN_ROLE`, `FLOW_CREATOR_ROLE` and `FLOW_OPERATOR_ROLE` to the
     * account that deploys the contract.
     *
     */
    constructor(
        string memory baseURI,
        string memory _name,
        string memory _symbol
    ) ERC1155(baseURI) {
        name = _name;
        symbol = _symbol;
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC1155-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * Requirements:
     * - the caller must have the `OPERATOR_ROLE`.
     */

    ///IssueRewardToken
    function createFanToken(
        bytes memory data,
        string memory _uri
    ) public returns (uint256) {
        _nextTokenId++;
        uint256 currentTokenID = _nextTokenId;

        _mint(_msgSender(), currentTokenID, 0, data);
        _tokenURIs[currentTokenID] = _uri;
        emit RewardTokenCreated(currentTokenID, _msgSender(), 0, _uri);
        return currentTokenID;
    }

    function delegateMintFanToken(
        address creator,
        uint256 tokenId,
        uint256 amount,
        bytes memory data
    ) public returns (uint256) {
        _mint(creator, tokenId, amount, data);
        emit RewardTokenMinted(tokenId, creator, amount);
        return tokenId;
    }

    /**
     * @notice Burns `tokenId`. See {ERC1155-_burn}.
     *
     * @dev Requirements:
     *
     * - The caller must own `tokenId` .
     */
    function destroyAsset(uint256 tokenId, uint256 amount) public {
        require(
            balanceOf(_msgSender(), tokenId) == amount,
            "RewardToken: Caller is not token owner"
        );
        _burn(_msgSender(), tokenId, amount);
        emit RewardTokenDestroyed(tokenId, _msgSender());
    }

    /// @dev  ONLY Operator can set the Base URI
    function setURI(string memory newuri) external {
        _setURI(newuri);
    }

    /** Getter Functions **/

    /// @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
    function uri(
        uint256 tokenId
    ) public view virtual override returns (string memory) {
        return _tokenURIs[tokenId];
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(
        bytes4 interfaceId
    ) public view virtual override(ERC1155) returns (bool) {
        return super.supportsInterface(interfaceId);
    }
}
