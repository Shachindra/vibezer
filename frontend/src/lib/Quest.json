{
	"compilerInput": "{\"language\":\"Solidity\",\"sources\":{\"contracts/Quest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Quest is ERC721, Ownable {\\n    uint256 private _tokenIds;\\n    uint256 public immutable NFT_PRICE; // .10 ETH\\n\\n    mapping(address => uint256) public stakedAmount;\\n    mapping(address => uint256) public lastFreeMint;\\n\\n    event Staked(address indexed user, uint256 amount);\\n    event Unstaked(address indexed user, uint256 amount);\\n    event NFTMinted(address indexed user, uint256 tokenId, bool isFree);\\n\\n    constructor(\\n        uint256 price,\\n        address initialOwner\\n    ) ERC721(\\\"QuestNFT\\\", \\\"QNFT\\\") Ownable(initialOwner) {\\n        NFT_PRICE = price;\\n    }\\n\\n    function mint() external {\\n        _tokenIds++;\\n        uint256 newTokenId = _tokenIds;\\n        _safeMint(msg.sender, newTokenId);\\n\\n        lastFreeMint[msg.sender] = block.timestamp;\\n        emit NFTMinted(msg.sender, newTokenId, true);\\n    }\\n}\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"}},\"settings\":{\"optimizer\":{\"enabled\":true,\"runs\":200},\"outputSelection\":{\"*\":{\"\":[\"ast\"],\"*\":[\"abi\",\"metadata\",\"devdoc\",\"userdoc\",\"storageLayout\",\"evm.legacyAssembly\",\"evm.bytecode\",\"evm.deployedBytecode\",\"evm.methodIdentifiers\",\"evm.gasEstimates\",\"evm.assembly\"]}},\"remappings\":[]}}",
	"name": "Quest",
	"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFree\",\"type\":\"bool\"}],\"name\":\"NFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NFT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastFreeMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Quest.sol\":\"Quest\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed37f0f86e7fe31659e48c3a2a5920a92dd7f13c85cf8991fb79fe5f01e08efd\",\"dweb:/ipfs/QmUtm9bQGvjr9hHGwkPWrbgFmVqzaJcxjkaYDex2oGsonS\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7\",\"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d01e0b2b837ee2f628545e54d8715b49c7ef2befd08356c2e7f6c50dde8a1c22\",\"dweb:/ipfs/QmWBAn6y2D1xgftci97Z3qR9tQnkvwQpYwFwkTvDMvqU4i\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02\",\"dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1777404f1dcd0fac188e55a288724ec3c67b45288e49cc64723e95e702b49ab8\",\"dweb:/ipfs/QmZFdC626GButBApwDUvvTnUzdinevC3B24d7yyh57XkiA\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]},\"contracts/Quest.sol\":{\"keccak256\":\"0xf6b9ae7354381fb926a7f3cf85af65c7e17fd41f933fde2042787303bcdb48a7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c7a85a1d5193e1e5d475931ca12e075e9e9a35d8794da048f6bf959db9f12de8\",\"dweb:/ipfs/QmRE3RtvatBFoikuFmzViiJ6VWJvgUca6fwELpaTYFNewe\"]}},\"version\":1}",
	"bytecode": {
		"functionDebugData": {
			"@_2995": {
				"entryPoint": null,
				"id": 2995,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_354": {
				"entryPoint": null,
				"id": 354,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_50": {
				"entryPoint": null,
				"id": 50,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@_transferOwnership_146": {
				"entryPoint": 216,
				"id": 146,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"abi_decode_tuple_t_uint256t_address_fromMemory": {
				"entryPoint": 297,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"array_dataslot_string_storage": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"clean_up_bytearray_end_slots_string_storage": {
				"entryPoint": 435,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
				"entryPoint": 517,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"extract_byte_array_length": {
				"entryPoint": 377,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"extract_used_part_and_set_length_of_short_byte_array": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"panic_error_0x41": {
				"entryPoint": 357,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			}
		},
		"generatedSources": [
			{
				"ast": {
					"nodeType": "YulBlock",
					"src": "0:3296:13",
					"statements": [
						{
							"nodeType": "YulBlock",
							"src": "6:3:13",
							"statements": []
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "112:253:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "158:16:13",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "167:1:13",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "170:1:13",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "160:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "160:12:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "160:12:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "133:7:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "142:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "129:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "129:23:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "154:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "125:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "125:32:13"
										},
										"nodeType": "YulIf",
										"src": "122:52:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "183:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "199:9:13"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "193:5:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "193:16:13"
										},
										"variableNames": [
											{
												"name": "value0",
												"nodeType": "YulIdentifier",
												"src": "183:6:13"
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "218:38:13",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "241:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "252:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "237:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "237:18:13"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "231:5:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "231:25:13"
										},
										"variables": [
											{
												"name": "value",
												"nodeType": "YulTypedName",
												"src": "222:5:13",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "319:16:13",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "328:1:13",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "331:1:13",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "321:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "321:12:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "321:12:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "278:5:13"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "289:5:13"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "304:3:13",
																					"type": "",
																					"value": "160"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "309:1:13",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "shl",
																				"nodeType": "YulIdentifier",
																				"src": "300:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "300:11:13"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "313:1:13",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "sub",
																		"nodeType": "YulIdentifier",
																		"src": "296:3:13"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "296:19:13"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "285:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "285:31:13"
														}
													],
													"functionName": {
														"name": "eq",
														"nodeType": "YulIdentifier",
														"src": "275:2:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "275:42:13"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "268:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "268:50:13"
										},
										"nodeType": "YulIf",
										"src": "265:70:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "344:15:13",
										"value": {
											"name": "value",
											"nodeType": "YulIdentifier",
											"src": "354:5:13"
										},
										"variableNames": [
											{
												"name": "value1",
												"nodeType": "YulIdentifier",
												"src": "344:6:13"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_uint256t_address_fromMemory",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "70:9:13",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "81:7:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "93:6:13",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "101:6:13",
									"type": ""
								}
							],
							"src": "14:351:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "402:95:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "419:1:13",
													"type": "",
													"value": "0"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "426:3:13",
															"type": "",
															"value": "224"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "431:10:13",
															"type": "",
															"value": "0x4e487b71"
														}
													],
													"functionName": {
														"name": "shl",
														"nodeType": "YulIdentifier",
														"src": "422:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "422:20:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "412:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "412:31:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "412:31:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "459:1:13",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "462:4:13",
													"type": "",
													"value": "0x41"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "452:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "452:15:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "452:15:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "483:1:13",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "486:4:13",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "476:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "476:15:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "476:15:13"
									}
								]
							},
							"name": "panic_error_0x41",
							"nodeType": "YulFunctionDefinition",
							"src": "370:127:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "557:325:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "567:22:13",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "581:1:13",
													"type": "",
													"value": "1"
												},
												{
													"name": "data",
													"nodeType": "YulIdentifier",
													"src": "584:4:13"
												}
											],
											"functionName": {
												"name": "shr",
												"nodeType": "YulIdentifier",
												"src": "577:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "577:12:13"
										},
										"variableNames": [
											{
												"name": "length",
												"nodeType": "YulIdentifier",
												"src": "567:6:13"
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "598:38:13",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nodeType": "YulIdentifier",
													"src": "628:4:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "634:1:13",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "and",
												"nodeType": "YulIdentifier",
												"src": "624:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "624:12:13"
										},
										"variables": [
											{
												"name": "outOfPlaceEncoding",
												"nodeType": "YulTypedName",
												"src": "602:18:13",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "675:31:13",
											"statements": [
												{
													"nodeType": "YulAssignment",
													"src": "677:27:13",
													"value": {
														"arguments": [
															{
																"name": "length",
																"nodeType": "YulIdentifier",
																"src": "691:6:13"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "699:4:13",
																"type": "",
																"value": "0x7f"
															}
														],
														"functionName": {
															"name": "and",
															"nodeType": "YulIdentifier",
															"src": "687:3:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "687:17:13"
													},
													"variableNames": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "677:6:13"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nodeType": "YulIdentifier",
													"src": "655:18:13"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "648:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "648:26:13"
										},
										"nodeType": "YulIf",
										"src": "645:61:13"
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "765:111:13",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "786:1:13",
																"type": "",
																"value": "0"
															},
															{
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "793:3:13",
																		"type": "",
																		"value": "224"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "798:10:13",
																		"type": "",
																		"value": "0x4e487b71"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "789:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "789:20:13"
															}
														],
														"functionName": {
															"name": "mstore",
															"nodeType": "YulIdentifier",
															"src": "779:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "779:31:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "779:31:13"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "830:1:13",
																"type": "",
																"value": "4"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "833:4:13",
																"type": "",
																"value": "0x22"
															}
														],
														"functionName": {
															"name": "mstore",
															"nodeType": "YulIdentifier",
															"src": "823:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "823:15:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "823:15:13"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "858:1:13",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "861:4:13",
																"type": "",
																"value": "0x24"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "851:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "851:15:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "851:15:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nodeType": "YulIdentifier",
													"src": "721:18:13"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "744:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "752:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "lt",
														"nodeType": "YulIdentifier",
														"src": "741:2:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "741:14:13"
												}
											],
											"functionName": {
												"name": "eq",
												"nodeType": "YulIdentifier",
												"src": "718:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "718:38:13"
										},
										"nodeType": "YulIf",
										"src": "715:161:13"
									}
								]
							},
							"name": "extract_byte_array_length",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nodeType": "YulTypedName",
									"src": "537:4:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "546:6:13",
									"type": ""
								}
							],
							"src": "502:380:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "943:65:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "960:1:13",
													"type": "",
													"value": "0"
												},
												{
													"name": "ptr",
													"nodeType": "YulIdentifier",
													"src": "963:3:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "953:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "953:14:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "953:14:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "976:26:13",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "994:1:13",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "997:4:13",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "keccak256",
												"nodeType": "YulIdentifier",
												"src": "984:9:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "984:18:13"
										},
										"variableNames": [
											{
												"name": "data",
												"nodeType": "YulIdentifier",
												"src": "976:4:13"
											}
										]
									}
								]
							},
							"name": "array_dataslot_string_storage",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "ptr",
									"nodeType": "YulTypedName",
									"src": "926:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "data",
									"nodeType": "YulTypedName",
									"src": "934:4:13",
									"type": ""
								}
							],
							"src": "887:121:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1094:464:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "1127:425:13",
											"statements": [
												{
													"nodeType": "YulVariableDeclaration",
													"src": "1141:11:13",
													"value": {
														"kind": "number",
														"nodeType": "YulLiteral",
														"src": "1151:1:13",
														"type": "",
														"value": "0"
													},
													"variables": [
														{
															"name": "_1",
															"nodeType": "YulTypedName",
															"src": "1145:2:13",
															"type": ""
														}
													]
												},
												{
													"expression": {
														"arguments": [
															{
																"name": "_1",
																"nodeType": "YulIdentifier",
																"src": "1172:2:13"
															},
															{
																"name": "array",
																"nodeType": "YulIdentifier",
																"src": "1176:5:13"
															}
														],
														"functionName": {
															"name": "mstore",
															"nodeType": "YulIdentifier",
															"src": "1165:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "1165:17:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "1165:17:13"
												},
												{
													"nodeType": "YulVariableDeclaration",
													"src": "1195:31:13",
													"value": {
														"arguments": [
															{
																"name": "_1",
																"nodeType": "YulIdentifier",
																"src": "1217:2:13"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1221:4:13",
																"type": "",
																"value": "0x20"
															}
														],
														"functionName": {
															"name": "keccak256",
															"nodeType": "YulIdentifier",
															"src": "1207:9:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "1207:19:13"
													},
													"variables": [
														{
															"name": "data",
															"nodeType": "YulTypedName",
															"src": "1199:4:13",
															"type": ""
														}
													]
												},
												{
													"nodeType": "YulVariableDeclaration",
													"src": "1239:57:13",
													"value": {
														"arguments": [
															{
																"name": "data",
																"nodeType": "YulIdentifier",
																"src": "1262:4:13"
															},
															{
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1272:1:13",
																		"type": "",
																		"value": "5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "startIndex",
																				"nodeType": "YulIdentifier",
																				"src": "1279:10:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1291:2:13",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1275:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1275:19:13"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "1268:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1268:27:13"
															}
														],
														"functionName": {
															"name": "add",
															"nodeType": "YulIdentifier",
															"src": "1258:3:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "1258:38:13"
													},
													"variables": [
														{
															"name": "deleteStart",
															"nodeType": "YulTypedName",
															"src": "1243:11:13",
															"type": ""
														}
													]
												},
												{
													"body": {
														"nodeType": "YulBlock",
														"src": "1333:23:13",
														"statements": [
															{
																"nodeType": "YulAssignment",
																"src": "1335:19:13",
																"value": {
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "1350:4:13"
																},
																"variableNames": [
																	{
																		"name": "deleteStart",
																		"nodeType": "YulIdentifier",
																		"src": "1335:11:13"
																	}
																]
															}
														]
													},
													"condition": {
														"arguments": [
															{
																"name": "startIndex",
																"nodeType": "YulIdentifier",
																"src": "1315:10:13"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1327:4:13",
																"type": "",
																"value": "0x20"
															}
														],
														"functionName": {
															"name": "lt",
															"nodeType": "YulIdentifier",
															"src": "1312:2:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "1312:20:13"
													},
													"nodeType": "YulIf",
													"src": "1309:47:13"
												},
												{
													"nodeType": "YulVariableDeclaration",
													"src": "1369:41:13",
													"value": {
														"arguments": [
															{
																"name": "data",
																"nodeType": "YulIdentifier",
																"src": "1383:4:13"
															},
															{
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1393:1:13",
																		"type": "",
																		"value": "5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "len",
																				"nodeType": "YulIdentifier",
																				"src": "1400:3:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1405:2:13",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1396:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1396:12:13"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "1389:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1389:20:13"
															}
														],
														"functionName": {
															"name": "add",
															"nodeType": "YulIdentifier",
															"src": "1379:3:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "1379:31:13"
													},
													"variables": [
														{
															"name": "_2",
															"nodeType": "YulTypedName",
															"src": "1373:2:13",
															"type": ""
														}
													]
												},
												{
													"nodeType": "YulVariableDeclaration",
													"src": "1423:24:13",
													"value": {
														"name": "deleteStart",
														"nodeType": "YulIdentifier",
														"src": "1436:11:13"
													},
													"variables": [
														{
															"name": "start",
															"nodeType": "YulTypedName",
															"src": "1427:5:13",
															"type": ""
														}
													]
												},
												{
													"body": {
														"nodeType": "YulBlock",
														"src": "1521:21:13",
														"statements": [
															{
																"expression": {
																	"arguments": [
																		{
																			"name": "start",
																			"nodeType": "YulIdentifier",
																			"src": "1530:5:13"
																		},
																		{
																			"name": "_1",
																			"nodeType": "YulIdentifier",
																			"src": "1537:2:13"
																		}
																	],
																	"functionName": {
																		"name": "sstore",
																		"nodeType": "YulIdentifier",
																		"src": "1523:6:13"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "1523:17:13"
																},
																"nodeType": "YulExpressionStatement",
																"src": "1523:17:13"
															}
														]
													},
													"condition": {
														"arguments": [
															{
																"name": "start",
																"nodeType": "YulIdentifier",
																"src": "1471:5:13"
															},
															{
																"name": "_2",
																"nodeType": "YulIdentifier",
																"src": "1478:2:13"
															}
														],
														"functionName": {
															"name": "lt",
															"nodeType": "YulIdentifier",
															"src": "1468:2:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "1468:13:13"
													},
													"nodeType": "YulForLoop",
													"post": {
														"nodeType": "YulBlock",
														"src": "1482:26:13",
														"statements": [
															{
																"nodeType": "YulAssignment",
																"src": "1484:22:13",
																"value": {
																	"arguments": [
																		{
																			"name": "start",
																			"nodeType": "YulIdentifier",
																			"src": "1497:5:13"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "1504:1:13",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "1493:3:13"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "1493:13:13"
																},
																"variableNames": [
																	{
																		"name": "start",
																		"nodeType": "YulIdentifier",
																		"src": "1484:5:13"
																	}
																]
															}
														]
													},
													"pre": {
														"nodeType": "YulBlock",
														"src": "1464:3:13",
														"statements": []
													},
													"src": "1460:82:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "len",
													"nodeType": "YulIdentifier",
													"src": "1110:3:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1115:2:13",
													"type": "",
													"value": "31"
												}
											],
											"functionName": {
												"name": "gt",
												"nodeType": "YulIdentifier",
												"src": "1107:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "1107:11:13"
										},
										"nodeType": "YulIf",
										"src": "1104:448:13"
									}
								]
							},
							"name": "clean_up_bytearray_end_slots_string_storage",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "array",
									"nodeType": "YulTypedName",
									"src": "1066:5:13",
									"type": ""
								},
								{
									"name": "len",
									"nodeType": "YulTypedName",
									"src": "1073:3:13",
									"type": ""
								},
								{
									"name": "startIndex",
									"nodeType": "YulTypedName",
									"src": "1078:10:13",
									"type": ""
								}
							],
							"src": "1013:545:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1648:81:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "1658:65:13",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "data",
															"nodeType": "YulIdentifier",
															"src": "1673:4:13"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1691:1:13",
																					"type": "",
																					"value": "3"
																				},
																				{
																					"name": "len",
																					"nodeType": "YulIdentifier",
																					"src": "1694:3:13"
																				}
																			],
																			"functionName": {
																				"name": "shl",
																				"nodeType": "YulIdentifier",
																				"src": "1687:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1687:11:13"
																		},
																		{
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1704:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "not",
																				"nodeType": "YulIdentifier",
																				"src": "1700:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1700:6:13"
																		}
																	],
																	"functionName": {
																		"name": "shr",
																		"nodeType": "YulIdentifier",
																		"src": "1683:3:13"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "1683:24:13"
																}
															],
															"functionName": {
																"name": "not",
																"nodeType": "YulIdentifier",
																"src": "1679:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "1679:29:13"
														}
													],
													"functionName": {
														"name": "and",
														"nodeType": "YulIdentifier",
														"src": "1669:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "1669:40:13"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1715:1:13",
															"type": "",
															"value": "1"
														},
														{
															"name": "len",
															"nodeType": "YulIdentifier",
															"src": "1718:3:13"
														}
													],
													"functionName": {
														"name": "shl",
														"nodeType": "YulIdentifier",
														"src": "1711:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "1711:11:13"
												}
											],
											"functionName": {
												"name": "or",
												"nodeType": "YulIdentifier",
												"src": "1666:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "1666:57:13"
										},
										"variableNames": [
											{
												"name": "used",
												"nodeType": "YulIdentifier",
												"src": "1658:4:13"
											}
										]
									}
								]
							},
							"name": "extract_used_part_and_set_length_of_short_byte_array",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nodeType": "YulTypedName",
									"src": "1625:4:13",
									"type": ""
								},
								{
									"name": "len",
									"nodeType": "YulTypedName",
									"src": "1631:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "used",
									"nodeType": "YulTypedName",
									"src": "1639:4:13",
									"type": ""
								}
							],
							"src": "1563:166:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1830:1256:13",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "1840:24:13",
										"value": {
											"arguments": [
												{
													"name": "src",
													"nodeType": "YulIdentifier",
													"src": "1860:3:13"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "1854:5:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "1854:10:13"
										},
										"variables": [
											{
												"name": "newLen",
												"nodeType": "YulTypedName",
												"src": "1844:6:13",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "1907:22:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x41",
															"nodeType": "YulIdentifier",
															"src": "1909:16:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "1909:18:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "1909:18:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "newLen",
													"nodeType": "YulIdentifier",
													"src": "1879:6:13"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "1895:2:13",
																	"type": "",
																	"value": "64"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "1899:1:13",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "shl",
																"nodeType": "YulIdentifier",
																"src": "1891:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "1891:10:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1903:1:13",
															"type": "",
															"value": "1"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "1887:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "1887:18:13"
												}
											],
											"functionName": {
												"name": "gt",
												"nodeType": "YulIdentifier",
												"src": "1876:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "1876:30:13"
										},
										"nodeType": "YulIf",
										"src": "1873:56:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "slot",
													"nodeType": "YulIdentifier",
													"src": "1982:4:13"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "slot",
																	"nodeType": "YulIdentifier",
																	"src": "2020:4:13"
																}
															],
															"functionName": {
																"name": "sload",
																"nodeType": "YulIdentifier",
																"src": "2014:5:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "2014:11:13"
														}
													],
													"functionName": {
														"name": "extract_byte_array_length",
														"nodeType": "YulIdentifier",
														"src": "1988:25:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "1988:38:13"
												},
												{
													"name": "newLen",
													"nodeType": "YulIdentifier",
													"src": "2028:6:13"
												}
											],
											"functionName": {
												"name": "clean_up_bytearray_end_slots_string_storage",
												"nodeType": "YulIdentifier",
												"src": "1938:43:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "1938:97:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "1938:97:13"
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "2044:18:13",
										"value": {
											"kind": "number",
											"nodeType": "YulLiteral",
											"src": "2061:1:13",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "srcOffset",
												"nodeType": "YulTypedName",
												"src": "2048:9:13",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "2071:23:13",
										"value": {
											"kind": "number",
											"nodeType": "YulLiteral",
											"src": "2090:4:13",
											"type": "",
											"value": "0x20"
										},
										"variables": [
											{
												"name": "srcOffset_1",
												"nodeType": "YulTypedName",
												"src": "2075:11:13",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "2103:24:13",
										"value": {
											"name": "srcOffset_1",
											"nodeType": "YulIdentifier",
											"src": "2116:11:13"
										},
										"variableNames": [
											{
												"name": "srcOffset",
												"nodeType": "YulIdentifier",
												"src": "2103:9:13"
											}
										]
									},
									{
										"cases": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2173:656:13",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2187:35:13",
															"value": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "2206:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2218:2:13",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "2214:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2214:7:13"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2202:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2202:20:13"
															},
															"variables": [
																{
																	"name": "loopEnd",
																	"nodeType": "YulTypedName",
																	"src": "2191:7:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2235:49:13",
															"value": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "2279:4:13"
																	}
																],
																"functionName": {
																	"name": "array_dataslot_string_storage",
																	"nodeType": "YulIdentifier",
																	"src": "2249:29:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2249:35:13"
															},
															"variables": [
																{
																	"name": "dstPtr",
																	"nodeType": "YulTypedName",
																	"src": "2239:6:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2297:10:13",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2306:1:13",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "2301:1:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2384:172:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nodeType": "YulIdentifier",
																					"src": "2409:6:13"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "2427:3:13"
																								},
																								{
																									"name": "srcOffset",
																									"nodeType": "YulIdentifier",
																									"src": "2432:9:13"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "2423:3:13"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2423:19:13"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "2417:5:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2417:26:13"
																				}
																			],
																			"functionName": {
																				"name": "sstore",
																				"nodeType": "YulIdentifier",
																				"src": "2402:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2402:42:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2402:42:13"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "2461:24:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nodeType": "YulIdentifier",
																					"src": "2475:6:13"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2483:1:13",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "2471:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2471:14:13"
																		},
																		"variableNames": [
																			{
																				"name": "dstPtr",
																				"nodeType": "YulIdentifier",
																				"src": "2461:6:13"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "2502:40:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcOffset",
																					"nodeType": "YulIdentifier",
																					"src": "2519:9:13"
																				},
																				{
																					"name": "srcOffset_1",
																					"nodeType": "YulIdentifier",
																					"src": "2530:11:13"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "2515:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2515:27:13"
																		},
																		"variableNames": [
																			{
																				"name": "srcOffset",
																				"nodeType": "YulIdentifier",
																				"src": "2502:9:13"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "2331:1:13"
																	},
																	{
																		"name": "loopEnd",
																		"nodeType": "YulIdentifier",
																		"src": "2334:7:13"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "2328:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2328:14:13"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "2343:28:13",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2345:24:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "2354:1:13"
																				},
																				{
																					"name": "srcOffset_1",
																					"nodeType": "YulIdentifier",
																					"src": "2357:11:13"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "2350:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2350:19:13"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "2345:1:13"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "2324:3:13",
																"statements": []
															},
															"src": "2320:236:13"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2604:166:13",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "2622:43:13",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nodeType": "YulIdentifier",
																							"src": "2649:3:13"
																						},
																						{
																							"name": "srcOffset",
																							"nodeType": "YulIdentifier",
																							"src": "2654:9:13"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2645:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2645:19:13"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "2639:5:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2639:26:13"
																		},
																		"variables": [
																			{
																				"name": "lastValue",
																				"nodeType": "YulTypedName",
																				"src": "2626:9:13",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nodeType": "YulIdentifier",
																					"src": "2689:6:13"
																				},
																				{
																					"arguments": [
																						{
																							"name": "lastValue",
																							"nodeType": "YulIdentifier",
																							"src": "2701:9:13"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"arguments": [
																												{
																													"arguments": [
																														{
																															"kind": "number",
																															"nodeType": "YulLiteral",
																															"src": "2728:1:13",
																															"type": "",
																															"value": "3"
																														},
																														{
																															"name": "newLen",
																															"nodeType": "YulIdentifier",
																															"src": "2731:6:13"
																														}
																													],
																													"functionName": {
																														"name": "shl",
																														"nodeType": "YulIdentifier",
																														"src": "2724:3:13"
																													},
																													"nodeType": "YulFunctionCall",
																													"src": "2724:14:13"
																												},
																												{
																													"kind": "number",
																													"nodeType": "YulLiteral",
																													"src": "2740:3:13",
																													"type": "",
																													"value": "248"
																												}
																											],
																											"functionName": {
																												"name": "and",
																												"nodeType": "YulIdentifier",
																												"src": "2720:3:13"
																											},
																											"nodeType": "YulFunctionCall",
																											"src": "2720:24:13"
																										},
																										{
																											"arguments": [
																												{
																													"kind": "number",
																													"nodeType": "YulLiteral",
																													"src": "2750:1:13",
																													"type": "",
																													"value": "0"
																												}
																											],
																											"functionName": {
																												"name": "not",
																												"nodeType": "YulIdentifier",
																												"src": "2746:3:13"
																											},
																											"nodeType": "YulFunctionCall",
																											"src": "2746:6:13"
																										}
																									],
																									"functionName": {
																										"name": "shr",
																										"nodeType": "YulIdentifier",
																										"src": "2716:3:13"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "2716:37:13"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nodeType": "YulIdentifier",
																								"src": "2712:3:13"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2712:42:13"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nodeType": "YulIdentifier",
																						"src": "2697:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2697:58:13"
																				}
																			],
																			"functionName": {
																				"name": "sstore",
																				"nodeType": "YulIdentifier",
																				"src": "2682:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2682:74:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2682:74:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "loopEnd",
																		"nodeType": "YulIdentifier",
																		"src": "2575:7:13"
																	},
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "2584:6:13"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "2572:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2572:19:13"
															},
															"nodeType": "YulIf",
															"src": "2569:201:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "2790:4:13"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2804:1:13",
																						"type": "",
																						"value": "1"
																					},
																					{
																						"name": "newLen",
																						"nodeType": "YulIdentifier",
																						"src": "2807:6:13"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "2800:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2800:14:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2816:1:13",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2796:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2796:22:13"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nodeType": "YulIdentifier",
																	"src": "2783:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2783:36:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2783:36:13"
														}
													]
												},
												"nodeType": "YulCase",
												"src": "2166:663:13",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2171:1:13",
													"type": "",
													"value": "1"
												}
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2846:234:13",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2860:14:13",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2873:1:13",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "2864:5:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2909:67:13",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2927:35:13",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nodeType": "YulIdentifier",
																							"src": "2946:3:13"
																						},
																						{
																							"name": "srcOffset",
																							"nodeType": "YulIdentifier",
																							"src": "2951:9:13"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2942:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2942:19:13"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "2936:5:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2936:26:13"
																		},
																		"variableNames": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2927:5:13"
																			}
																		]
																	}
																]
															},
															"condition": {
																"name": "newLen",
																"nodeType": "YulIdentifier",
																"src": "2890:6:13"
															},
															"nodeType": "YulIf",
															"src": "2887:89:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "2996:4:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3055:5:13"
																			},
																			{
																				"name": "newLen",
																				"nodeType": "YulIdentifier",
																				"src": "3062:6:13"
																			}
																		],
																		"functionName": {
																			"name": "extract_used_part_and_set_length_of_short_byte_array",
																			"nodeType": "YulIdentifier",
																			"src": "3002:52:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3002:67:13"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nodeType": "YulIdentifier",
																	"src": "2989:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2989:81:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2989:81:13"
														}
													]
												},
												"nodeType": "YulCase",
												"src": "2838:242:13",
												"value": "default"
											}
										],
										"expression": {
											"arguments": [
												{
													"name": "newLen",
													"nodeType": "YulIdentifier",
													"src": "2146:6:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2154:2:13",
													"type": "",
													"value": "31"
												}
											],
											"functionName": {
												"name": "gt",
												"nodeType": "YulIdentifier",
												"src": "2143:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2143:14:13"
										},
										"nodeType": "YulSwitch",
										"src": "2136:944:13"
									}
								]
							},
							"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "slot",
									"nodeType": "YulTypedName",
									"src": "1815:4:13",
									"type": ""
								},
								{
									"name": "src",
									"nodeType": "YulTypedName",
									"src": "1821:3:13",
									"type": ""
								}
							],
							"src": "1734:1352:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3192:102:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "3202:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "3214:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3225:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "3210:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "3210:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "3202:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "3244:9:13"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "3259:6:13"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "3275:3:13",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "3280:1:13",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nodeType": "YulIdentifier",
																		"src": "3271:3:13"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "3271:11:13"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "3284:1:13",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "3267:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "3267:19:13"
														}
													],
													"functionName": {
														"name": "and",
														"nodeType": "YulIdentifier",
														"src": "3255:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "3255:32:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "3237:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "3237:51:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "3237:51:13"
									}
								]
							},
							"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "3161:9:13",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "3172:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "3183:4:13",
									"type": ""
								}
							],
							"src": "3091:203:13"
						}
					]
				},
				"contents": "{\n    { }\n    function abi_decode_tuple_t_uint256t_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := mload(headStart)\n        let value := mload(add(headStart, 32))\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value1 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n}",
				"id": 13,
				"language": "Yul",
				"name": "#utility.yul"
			}
		],
		"linkReferences": {},
		"object": "60a060405234801562000010575f80fd5b506040516200145938038062001459833981016040819052620000339162000129565b8060405180604001604052806008815260200167145d595cdd13919560c21b815250604051806040016040528060048152602001631453919560e21b815250815f908162000082919062000205565b50600162000091828262000205565b5050506001600160a01b038116620000c257604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b620000cd81620000d8565b5050608052620002cd565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f80604083850312156200013b575f80fd5b825160208401519092506001600160a01b03811681146200015a575f80fd5b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b600181811c908216806200018e57607f821691505b602082108103620001ad57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111562000200575f81815260208120601f850160051c81016020861015620001db5750805b601f850160051c820191505b81811015620001fc57828155600101620001e7565b5050505b505050565b81516001600160401b0381111562000221576200022162000165565b620002398162000232845462000179565b84620001b3565b602080601f8311600181146200026f575f8415620002575750858301515b5f19600386901b1c1916600185901b178555620001fc565b5f85815260208120601f198616915b828110156200029f578886015182559484019460019091019084016200027e565b5085821015620002bd57878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b608051611173620002e65f395f6101ee01526111735ff3fe608060405234801561000f575f80fd5b5060043610610127575f3560e01c8063715018a6116100a9578063b88d4fde1161006e578063b88d4fde14610284578063c87b56dd14610297578063e985e9c5146102aa578063f2fde38b146102bd578063f9931855146102d0575f80fd5b8063715018a6146102315780638da5cb5b1461023957806395d89b411461024a578063a22cb46514610252578063a693b19f14610265575f80fd5b806323b872dd116100ef57806323b872dd146101b057806342842e0e146101c35780636352211e146101d6578063676dd563146101e957806370a082311461021e575f80fd5b806301ffc9a71461012b57806306fdde0314610153578063081812fc14610168578063095ea7b3146101935780631249c58b146101a8575b5f80fd5b61013e610139366004610de3565b6102ef565b60405190151581526020015b60405180910390f35b61015b610340565b60405161014a9190610e4b565b61017b610176366004610e5d565b6103cf565b6040516001600160a01b03909116815260200161014a565b6101a66101a1366004610e8f565b6103f6565b005b6101a6610405565b6101a66101be366004610eb7565b610477565b6101a66101d1366004610eb7565b610505565b61017b6101e4366004610e5d565b610524565b6102107f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161014a565b61021061022c366004610ef0565b61052e565b6101a6610573565b6006546001600160a01b031661017b565b61015b610586565b6101a6610260366004610f09565b610595565b610210610273366004610ef0565b60096020525f908152604090205481565b6101a6610292366004610f56565b6105a0565b61015b6102a5366004610e5d565b6105b7565b61013e6102b836600461102b565b610628565b6101a66102cb366004610ef0565b610655565b6102106102de366004610ef0565b60086020525f908152604090205481565b5f6001600160e01b031982166380ac58cd60e01b148061031f57506001600160e01b03198216635b5e139f60e01b145b8061033a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60605f805461034e9061105c565b80601f016020809104026020016040519081016040528092919081815260200182805461037a9061105c565b80156103c55780601f1061039c576101008083540402835291602001916103c5565b820191905f5260205f20905b8154815290600101906020018083116103a857829003601f168201915b5050505050905090565b5f6103d982610692565b505f828152600460205260409020546001600160a01b031661033a565b6104018282336106ca565b5050565b60078054905f61041483611094565b909155505060075461042633826106d7565b335f8181526009602090815260409182902042905581518481526001918101919091527f8fa3ff725d2f7190c5e5dd9bc88f241a72b239e127e347dccdfc28e44e5e0963910160405180910390a250565b6001600160a01b0382166104a557604051633250574960e11b81525f60048201526024015b60405180910390fd5b5f6104b18383336106f0565b9050836001600160a01b0316816001600160a01b0316146104ff576040516364283d7b60e01b81526001600160a01b038086166004830152602482018490528216604482015260640161049c565b50505050565b61051f83838360405180602001604052805f8152506105a0565b505050565b5f61033a82610692565b5f6001600160a01b038216610558576040516322718ad960e21b81525f600482015260240161049c565b506001600160a01b03165f9081526003602052604090205490565b61057b6107e2565b6105845f61080f565b565b60606001805461034e9061105c565b610401338383610860565b6105ab848484610477565b6104ff848484846108fe565b60606105c282610692565b505f6105d860408051602081019091525f815290565b90505f8151116105f65760405180602001604052805f815250610621565b8061060084610a24565b6040516020016106119291906110b8565b6040516020818303038152906040525b9392505050565b6001600160a01b039182165f90815260056020908152604080832093909416825291909152205460ff1690565b61065d6107e2565b6001600160a01b03811661068657604051631e4fbdf760e01b81525f600482015260240161049c565b61068f8161080f565b50565b5f818152600260205260408120546001600160a01b03168061033a57604051637e27328960e01b81526004810184905260240161049c565b61051f8383836001610ab4565b610401828260405180602001604052805f815250610bb8565b5f828152600260205260408120546001600160a01b039081169083161561071c5761071c818486610bce565b6001600160a01b03811615610756576107375f855f80610ab4565b6001600160a01b0381165f90815260036020526040902080545f190190555b6001600160a01b03851615610784576001600160a01b0385165f908152600360205260409020805460010190555b5f8481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b6006546001600160a01b031633146105845760405163118cdaa760e01b815233600482015260240161049c565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b03821661089257604051630b61174360e31b81526001600160a01b038316600482015260240161049c565b6001600160a01b038381165f81815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b156104ff57604051630a85bd0160e11b81526001600160a01b0384169063150b7a02906109409033908890879087906004016110e6565b6020604051808303815f875af192505050801561097a575060408051601f3d908101601f1916820190925261097791810190611122565b60015b6109e1573d8080156109a7576040519150601f19603f3d011682016040523d82523d5f602084013e6109ac565b606091505b5080515f036109d957604051633250574960e11b81526001600160a01b038516600482015260240161049c565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b14610a1d57604051633250574960e11b81526001600160a01b038516600482015260240161049c565b5050505050565b60605f610a3083610c32565b60010190505f8167ffffffffffffffff811115610a4f57610a4f610f42565b6040519080825280601f01601f191660200182016040528015610a79576020820181803683370190505b5090508181016020015b5f19016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610a8357509392505050565b8080610ac857506001600160a01b03821615155b15610b89575f610ad784610692565b90506001600160a01b03831615801590610b035750826001600160a01b0316816001600160a01b031614155b8015610b165750610b148184610628565b155b15610b3f5760405163a9fbf51f60e01b81526001600160a01b038416600482015260240161049c565b8115610b875783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b50505f90815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b610bc28383610d09565b61051f5f8484846108fe565b610bd9838383610d6a565b61051f576001600160a01b038316610c0757604051637e27328960e01b81526004810182905260240161049c565b60405163177e802f60e01b81526001600160a01b03831660048201526024810182905260440161049c565b5f8072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610c705772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610c9c576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610cba57662386f26fc10000830492506010015b6305f5e1008310610cd2576305f5e100830492506008015b6127108310610ce657612710830492506004015b60648310610cf8576064830492506002015b600a831061033a5760010192915050565b6001600160a01b038216610d3257604051633250574960e11b81525f600482015260240161049c565b5f610d3e83835f6106f0565b90506001600160a01b0381161561051f576040516339e3563760e11b81525f600482015260240161049c565b5f6001600160a01b03831615801590610dc65750826001600160a01b0316846001600160a01b03161480610da35750610da38484610628565b80610dc657505f828152600460205260409020546001600160a01b038481169116145b949350505050565b6001600160e01b03198116811461068f575f80fd5b5f60208284031215610df3575f80fd5b813561062181610dce565b5f5b83811015610e18578181015183820152602001610e00565b50505f910152565b5f8151808452610e37816020860160208601610dfe565b601f01601f19169290920160200192915050565b602081525f6106216020830184610e20565b5f60208284031215610e6d575f80fd5b5035919050565b80356001600160a01b0381168114610e8a575f80fd5b919050565b5f8060408385031215610ea0575f80fd5b610ea983610e74565b946020939093013593505050565b5f805f60608486031215610ec9575f80fd5b610ed284610e74565b9250610ee060208501610e74565b9150604084013590509250925092565b5f60208284031215610f00575f80fd5b61062182610e74565b5f8060408385031215610f1a575f80fd5b610f2383610e74565b915060208301358015158114610f37575f80fd5b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f805f8060808587031215610f69575f80fd5b610f7285610e74565b9350610f8060208601610e74565b925060408501359150606085013567ffffffffffffffff80821115610fa3575f80fd5b818701915087601f830112610fb6575f80fd5b813581811115610fc857610fc8610f42565b604051601f8201601f19908116603f01168101908382118183101715610ff057610ff0610f42565b816040528281528a6020848701011115611008575f80fd5b826020860160208301375f60208483010152809550505050505092959194509250565b5f806040838503121561103c575f80fd5b61104583610e74565b915061105360208401610e74565b90509250929050565b600181811c9082168061107057607f821691505b60208210810361108e57634e487b7160e01b5f52602260045260245ffd5b50919050565b5f600182016110b157634e487b7160e01b5f52601160045260245ffd5b5060010190565b5f83516110c9818460208801610dfe565b8351908301906110dd818360208801610dfe565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190525f9061111890830184610e20565b9695505050505050565b5f60208284031215611132575f80fd5b815161062181610dce56fea2646970667358221220a64cba6b232d169afbfbb9c78424acc9bd37b4eea8882368d78ad1162a5ea47064736f6c63430008140033",
		"opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x10 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1459 CODESIZE SUB DUP1 PUSH3 0x1459 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x33 SWAP2 PUSH3 0x129 JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x8 DUP2 MSTORE PUSH1 0x20 ADD PUSH8 0x145D595CDD139195 PUSH1 0xC2 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x14539195 PUSH1 0xE2 SHL DUP2 MSTORE POP DUP2 PUSH0 SWAP1 DUP2 PUSH3 0x82 SWAP2 SWAP1 PUSH3 0x205 JUMP JUMPDEST POP PUSH1 0x1 PUSH3 0x91 DUP3 DUP3 PUSH3 0x205 JUMP JUMPDEST POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0xC2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0xCD DUP2 PUSH3 0xD8 JUMP JUMPDEST POP POP PUSH1 0x80 MSTORE PUSH3 0x2CD JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x13B JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x15A JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x18E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x1AD JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x200 JUMPI PUSH0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x1DB JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x1FC JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x1E7 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x221 JUMPI PUSH3 0x221 PUSH3 0x165 JUMP JUMPDEST PUSH3 0x239 DUP2 PUSH3 0x232 DUP5 SLOAD PUSH3 0x179 JUMP JUMPDEST DUP5 PUSH3 0x1B3 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x26F JUMPI PUSH0 DUP5 ISZERO PUSH3 0x257 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x1FC JUMP JUMPDEST PUSH0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x29F JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x27E JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x2BD JUMPI DUP8 DUP6 ADD MLOAD PUSH0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x1173 PUSH3 0x2E6 PUSH0 CODECOPY PUSH0 PUSH2 0x1EE ADD MSTORE PUSH2 0x1173 PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x127 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xA9 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x6E JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x284 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x2AA JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2BD JUMPI DUP1 PUSH4 0xF9931855 EQ PUSH2 0x2D0 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x231 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x239 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x24A JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x252 JUMPI DUP1 PUSH4 0xA693B19F EQ PUSH2 0x265 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1B0 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x676DD563 EQ PUSH2 0x1E9 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x21E JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x12B JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x193 JUMPI DUP1 PUSH4 0x1249C58B EQ PUSH2 0x1A8 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x13E PUSH2 0x139 CALLDATASIZE PUSH1 0x4 PUSH2 0xDE3 JUMP JUMPDEST PUSH2 0x2EF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x15B PUSH2 0x340 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14A SWAP2 SWAP1 PUSH2 0xE4B JUMP JUMPDEST PUSH2 0x17B PUSH2 0x176 CALLDATASIZE PUSH1 0x4 PUSH2 0xE5D JUMP JUMPDEST PUSH2 0x3CF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x14A JUMP JUMPDEST PUSH2 0x1A6 PUSH2 0x1A1 CALLDATASIZE PUSH1 0x4 PUSH2 0xE8F JUMP JUMPDEST PUSH2 0x3F6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A6 PUSH2 0x405 JUMP JUMPDEST PUSH2 0x1A6 PUSH2 0x1BE CALLDATASIZE PUSH1 0x4 PUSH2 0xEB7 JUMP JUMPDEST PUSH2 0x477 JUMP JUMPDEST PUSH2 0x1A6 PUSH2 0x1D1 CALLDATASIZE PUSH1 0x4 PUSH2 0xEB7 JUMP JUMPDEST PUSH2 0x505 JUMP JUMPDEST PUSH2 0x17B PUSH2 0x1E4 CALLDATASIZE PUSH1 0x4 PUSH2 0xE5D JUMP JUMPDEST PUSH2 0x524 JUMP JUMPDEST PUSH2 0x210 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x14A JUMP JUMPDEST PUSH2 0x210 PUSH2 0x22C CALLDATASIZE PUSH1 0x4 PUSH2 0xEF0 JUMP JUMPDEST PUSH2 0x52E JUMP JUMPDEST PUSH2 0x1A6 PUSH2 0x573 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x17B JUMP JUMPDEST PUSH2 0x15B PUSH2 0x586 JUMP JUMPDEST PUSH2 0x1A6 PUSH2 0x260 CALLDATASIZE PUSH1 0x4 PUSH2 0xF09 JUMP JUMPDEST PUSH2 0x595 JUMP JUMPDEST PUSH2 0x210 PUSH2 0x273 CALLDATASIZE PUSH1 0x4 PUSH2 0xEF0 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1A6 PUSH2 0x292 CALLDATASIZE PUSH1 0x4 PUSH2 0xF56 JUMP JUMPDEST PUSH2 0x5A0 JUMP JUMPDEST PUSH2 0x15B PUSH2 0x2A5 CALLDATASIZE PUSH1 0x4 PUSH2 0xE5D JUMP JUMPDEST PUSH2 0x5B7 JUMP JUMPDEST PUSH2 0x13E PUSH2 0x2B8 CALLDATASIZE PUSH1 0x4 PUSH2 0x102B JUMP JUMPDEST PUSH2 0x628 JUMP JUMPDEST PUSH2 0x1A6 PUSH2 0x2CB CALLDATASIZE PUSH1 0x4 PUSH2 0xEF0 JUMP JUMPDEST PUSH2 0x655 JUMP JUMPDEST PUSH2 0x210 PUSH2 0x2DE CALLDATASIZE PUSH1 0x4 PUSH2 0xEF0 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x31F JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x33A JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH0 DUP1 SLOAD PUSH2 0x34E SWAP1 PUSH2 0x105C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x37A SWAP1 PUSH2 0x105C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3C5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x39C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3C5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3A8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x3D9 DUP3 PUSH2 0x692 JUMP JUMPDEST POP PUSH0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x33A JUMP JUMPDEST PUSH2 0x401 DUP3 DUP3 CALLER PUSH2 0x6CA JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD SWAP1 PUSH0 PUSH2 0x414 DUP4 PUSH2 0x1094 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x7 SLOAD PUSH2 0x426 CALLER DUP3 PUSH2 0x6D7 JUMP JUMPDEST CALLER PUSH0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 TIMESTAMP SWAP1 SSTORE DUP2 MLOAD DUP5 DUP2 MSTORE PUSH1 0x1 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x8FA3FF725D2F7190C5E5DD9BC88F241A72B239E127E347DCCDFC28E44E5E0963 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x4A5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x4B1 DUP4 DUP4 CALLER PUSH2 0x6F0 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x4FF JUMPI PUSH1 0x40 MLOAD PUSH4 0x64283D7B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x49C JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x51F DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 DUP2 MSTORE POP PUSH2 0x5A0 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x33A DUP3 PUSH2 0x692 JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x558 JUMPI PUSH1 0x40 MLOAD PUSH4 0x22718AD9 PUSH1 0xE2 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x49C JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x57B PUSH2 0x7E2 JUMP JUMPDEST PUSH2 0x584 PUSH0 PUSH2 0x80F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x34E SWAP1 PUSH2 0x105C JUMP JUMPDEST PUSH2 0x401 CALLER DUP4 DUP4 PUSH2 0x860 JUMP JUMPDEST PUSH2 0x5AB DUP5 DUP5 DUP5 PUSH2 0x477 JUMP JUMPDEST PUSH2 0x4FF DUP5 DUP5 DUP5 DUP5 PUSH2 0x8FE JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5C2 DUP3 PUSH2 0x692 JUMP JUMPDEST POP PUSH0 PUSH2 0x5D8 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 MLOAD GT PUSH2 0x5F6 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 DUP2 MSTORE POP PUSH2 0x621 JUMP JUMPDEST DUP1 PUSH2 0x600 DUP5 PUSH2 0xA24 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x611 SWAP3 SWAP2 SWAP1 PUSH2 0x10B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x65D PUSH2 0x7E2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x686 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x49C JUMP JUMPDEST PUSH2 0x68F DUP2 PUSH2 0x80F JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x33A JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x49C JUMP JUMPDEST PUSH2 0x51F DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0xAB4 JUMP JUMPDEST PUSH2 0x401 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 DUP2 MSTORE POP PUSH2 0xBB8 JUMP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND ISZERO PUSH2 0x71C JUMPI PUSH2 0x71C DUP2 DUP5 DUP7 PUSH2 0xBCE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x756 JUMPI PUSH2 0x737 PUSH0 DUP6 PUSH0 DUP1 PUSH2 0xAB4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH0 NOT ADD SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND ISZERO PUSH2 0x784 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMPDEST PUSH0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP8 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x584 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x49C JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x892 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB611743 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x49C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO PUSH2 0x4FF JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x940 SWAP1 CALLER SWAP1 DUP9 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x10E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x97A JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x977 SWAP2 DUP2 ADD SWAP1 PUSH2 0x1122 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x9E1 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x9A7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x9AC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH0 SUB PUSH2 0x9D9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x49C JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ PUSH2 0xA1D JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x49C JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0xA30 DUP4 PUSH2 0xC32 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA4F JUMPI PUSH2 0xA4F PUSH2 0xF42 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA79 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0xA83 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP1 PUSH2 0xAC8 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0xB89 JUMPI PUSH0 PUSH2 0xAD7 DUP5 PUSH2 0x692 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0xB03 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0xB16 JUMPI POP PUSH2 0xB14 DUP2 DUP5 PUSH2 0x628 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0xB3F JUMPI PUSH1 0x40 MLOAD PUSH4 0xA9FBF51F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x49C JUMP JUMPDEST DUP2 ISZERO PUSH2 0xB87 JUMPI DUP4 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST POP POP PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xBC2 DUP4 DUP4 PUSH2 0xD09 JUMP JUMPDEST PUSH2 0x51F PUSH0 DUP5 DUP5 DUP5 PUSH2 0x8FE JUMP JUMPDEST PUSH2 0xBD9 DUP4 DUP4 DUP4 PUSH2 0xD6A JUMP JUMPDEST PUSH2 0x51F JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xC07 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x49C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x177E802F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x49C JUMP JUMPDEST PUSH0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0xC70 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0xC9C JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0xCBA JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0xCD2 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0xCE6 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0xCF8 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x33A JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xD32 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x49C JUMP JUMPDEST PUSH0 PUSH2 0xD3E DUP4 DUP4 PUSH0 PUSH2 0x6F0 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x51F JUMPI PUSH1 0x40 MLOAD PUSH4 0x39E35637 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x49C JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0xDC6 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0xDA3 JUMPI POP PUSH2 0xDA3 DUP5 DUP5 PUSH2 0x628 JUMP JUMPDEST DUP1 PUSH2 0xDC6 JUMPI POP PUSH0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x68F JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDF3 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x621 DUP2 PUSH2 0xDCE JUMP JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE18 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xE00 JUMP JUMPDEST POP POP PUSH0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xE37 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xDFE JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 PUSH2 0x621 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xE20 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE6D JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xE8A JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xEA0 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xEA9 DUP4 PUSH2 0xE74 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xEC9 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xED2 DUP5 PUSH2 0xE74 JUMP JUMPDEST SWAP3 POP PUSH2 0xEE0 PUSH1 0x20 DUP6 ADD PUSH2 0xE74 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF00 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x621 DUP3 PUSH2 0xE74 JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF1A JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xF23 DUP4 PUSH2 0xE74 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xF37 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xF69 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xF72 DUP6 PUSH2 0xE74 JUMP JUMPDEST SWAP4 POP PUSH2 0xF80 PUSH1 0x20 DUP7 ADD PUSH2 0xE74 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xFA3 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xFB6 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xFC8 JUMPI PUSH2 0xFC8 PUSH2 0xF42 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xFF0 JUMPI PUSH2 0xFF0 PUSH2 0xF42 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x1008 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x103C JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1045 DUP4 PUSH2 0xE74 JUMP JUMPDEST SWAP2 POP PUSH2 0x1053 PUSH1 0x20 DUP5 ADD PUSH2 0xE74 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1070 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x108E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x1 DUP3 ADD PUSH2 0x10B1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH0 DUP4 MLOAD PUSH2 0x10C9 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0xDFE JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x10DD DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0xDFE JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH0 SWAP1 PUSH2 0x1118 SWAP1 DUP4 ADD DUP5 PUSH2 0xE20 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1132 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x621 DUP2 PUSH2 0xDCE JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA6 0x4C 0xBA PUSH12 0x232D169AFBFBB9C78424ACC9 0xBD CALLDATACOPY 0xB4 0xEE 0xA8 DUP9 0x23 PUSH9 0xD78AD1162A5EA47064 PUSH20 0x6F6C634300081400330000000000000000000000 ",
		"sourceMap": "169:823:12:-:0;;;587:154;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;693:12;1381:113:2;;;;;;;;;;;;;-1:-1:-1;;;1381:113:2;;;;;;;;;;;;;;;;-1:-1:-1;;;1381:113:2;;;1455:5;1447;:13;;;;;;:::i;:::-;-1:-1:-1;1470:7:2;:17;1480:7;1470;:17;:::i;:::-;-1:-1:-1;;;;;;;;1273:26:0;;1269:95;;1322:31;;-1:-1:-1;;;1322:31:0;;1350:1;1322:31;;;3237:51:13;3210:18;;1322:31:0;;;;;;;1269:95;1373:32;1392:12;1373:18;:32::i;:::-;-1:-1:-1;;717:17:12::2;::::0;169:823;;2912:187:0;3004:6;;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;;;;;3020:17:0;;;;;;;3052:40;;3004:6;;;3020:17;3004:6;;3052:40;;2985:16;;3052:40;2975:124;2912:187;:::o;14:351:13:-;93:6;101;154:2;142:9;133:7;129:23;125:32;122:52;;;170:1;167;160:12;122:52;193:16;;252:2;237:18;;231:25;193:16;;-1:-1:-1;;;;;;285:31:13;;275:42;;265:70;;331:1;328;321:12;265:70;354:5;344:15;;;14:351;;;;;:::o;370:127::-;431:10;426:3;422:20;419:1;412:31;462:4;459:1;452:15;486:4;483:1;476:15;502:380;581:1;577:12;;;;624;;;645:61;;699:4;691:6;687:17;677:27;;645:61;752:2;744:6;741:14;721:18;718:38;715:161;;798:10;793:3;789:20;786:1;779:31;833:4;830:1;823:15;861:4;858:1;851:15;715:161;;502:380;;;:::o;1013:545::-;1115:2;1110:3;1107:11;1104:448;;;1151:1;1176:5;1172:2;1165:17;1221:4;1217:2;1207:19;1291:2;1279:10;1275:19;1272:1;1268:27;1262:4;1258:38;1327:4;1315:10;1312:20;1309:47;;;-1:-1:-1;1350:4:13;1309:47;1405:2;1400:3;1396:12;1393:1;1389:20;1383:4;1379:31;1369:41;;1460:82;1478:2;1471:5;1468:13;1460:82;;;1523:17;;;1504:1;1493:13;1460:82;;;1464:3;;;1104:448;1013:545;;;:::o;1734:1352::-;1854:10;;-1:-1:-1;;;;;1876:30:13;;1873:56;;;1909:18;;:::i;:::-;1938:97;2028:6;1988:38;2020:4;2014:11;1988:38;:::i;:::-;1982:4;1938:97;:::i;:::-;2090:4;;2154:2;2143:14;;2171:1;2166:663;;;;2873:1;2890:6;2887:89;;;-1:-1:-1;2942:19:13;;;2936:26;2887:89;-1:-1:-1;;1691:1:13;1687:11;;;1683:24;1679:29;1669:40;1715:1;1711:11;;;1666:57;2989:81;;2136:944;;2166:663;960:1;953:14;;;997:4;984:18;;-1:-1:-1;;2202:20:13;;;2320:236;2334:7;2331:1;2328:14;2320:236;;;2423:19;;;2417:26;2402:42;;2515:27;;;;2483:1;2471:14;;;;2350:19;;2320:236;;;2324:3;2584:6;2575:7;2572:19;2569:201;;;2645:19;;;2639:26;-1:-1:-1;;2728:1:13;2724:14;;;2740:3;2720:24;2716:37;2712:42;2697:58;2682:74;;2569:201;-1:-1:-1;;;;;2816:1:13;2800:14;;;2796:22;2783:36;;-1:-1:-1;1734:1352:13:o;3091:203::-;169:823:12;;;;;;;;;;;;"
	},
	"abi": [
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "approve",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "price",
					"type": "uint256"
				},
				{
					"internalType": "address",
					"name": "initialOwner",
					"type": "address"
				}
			],
			"stateMutability": "nonpayable",
			"type": "constructor"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "sender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				},
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				}
			],
			"name": "ERC721IncorrectOwner",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "operator",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "ERC721InsufficientApproval",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "approver",
					"type": "address"
				}
			],
			"name": "ERC721InvalidApprover",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "operator",
					"type": "address"
				}
			],
			"name": "ERC721InvalidOperator",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				}
			],
			"name": "ERC721InvalidOwner",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "receiver",
					"type": "address"
				}
			],
			"name": "ERC721InvalidReceiver",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "sender",
					"type": "address"
				}
			],
			"name": "ERC721InvalidSender",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "ERC721NonexistentToken",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				}
			],
			"name": "OwnableInvalidOwner",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "OwnableUnauthorizedAccount",
			"type": "error"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "approved",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "Approval",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "operator",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "bool",
					"name": "approved",
					"type": "bool"
				}
			],
			"name": "ApprovalForAll",
			"type": "event"
		},
		{
			"inputs": [],
			"name": "mint",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "user",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "bool",
					"name": "isFree",
					"type": "bool"
				}
			],
			"name": "NFTMinted",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "previousOwner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "newOwner",
					"type": "address"
				}
			],
			"name": "OwnershipTransferred",
			"type": "event"
		},
		{
			"inputs": [],
			"name": "renounceOwnership",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "safeTransferFrom",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				},
				{
					"internalType": "bytes",
					"name": "data",
					"type": "bytes"
				}
			],
			"name": "safeTransferFrom",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "operator",
					"type": "address"
				},
				{
					"internalType": "bool",
					"name": "approved",
					"type": "bool"
				}
			],
			"name": "setApprovalForAll",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "user",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				}
			],
			"name": "Staked",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "Transfer",
			"type": "event"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "transferFrom",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "newOwner",
					"type": "address"
				}
			],
			"name": "transferOwnership",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "user",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				}
			],
			"name": "Unstaked",
			"type": "event"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				}
			],
			"name": "balanceOf",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "getApproved",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "operator",
					"type": "address"
				}
			],
			"name": "isApprovedForAll",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"name": "lastFreeMint",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "name",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "NFT_PRICE",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "owner",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "ownerOf",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"name": "stakedAmount",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "bytes4",
					"name": "interfaceId",
					"type": "bytes4"
				}
			],
			"name": "supportsInterface",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "symbol",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "tokenId",
					"type": "uint256"
				}
			],
			"name": "tokenURI",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		}
	],
	"storageLayout": {
		"storage": [
			{
				"astId": 317,
				"contract": "contracts/Quest.sol:Quest",
				"label": "_name",
				"offset": 0,
				"slot": "0",
				"type": "t_string_storage"
			},
			{
				"astId": 319,
				"contract": "contracts/Quest.sol:Quest",
				"label": "_symbol",
				"offset": 0,
				"slot": "1",
				"type": "t_string_storage"
			},
			{
				"astId": 323,
				"contract": "contracts/Quest.sol:Quest",
				"label": "_owners",
				"offset": 0,
				"slot": "2",
				"type": "t_mapping(t_uint256,t_address)"
			},
			{
				"astId": 327,
				"contract": "contracts/Quest.sol:Quest",
				"label": "_balances",
				"offset": 0,
				"slot": "3",
				"type": "t_mapping(t_address,t_uint256)"
			},
			{
				"astId": 331,
				"contract": "contracts/Quest.sol:Quest",
				"label": "_tokenApprovals",
				"offset": 0,
				"slot": "4",
				"type": "t_mapping(t_uint256,t_address)"
			},
			{
				"astId": 337,
				"contract": "contracts/Quest.sol:Quest",
				"label": "_operatorApprovals",
				"offset": 0,
				"slot": "5",
				"type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
			},
			{
				"astId": 8,
				"contract": "contracts/Quest.sol:Quest",
				"label": "_owner",
				"offset": 0,
				"slot": "6",
				"type": "t_address"
			},
			{
				"astId": 2946,
				"contract": "contracts/Quest.sol:Quest",
				"label": "_tokenIds",
				"offset": 0,
				"slot": "7",
				"type": "t_uint256"
			},
			{
				"astId": 2952,
				"contract": "contracts/Quest.sol:Quest",
				"label": "stakedAmount",
				"offset": 0,
				"slot": "8",
				"type": "t_mapping(t_address,t_uint256)"
			},
			{
				"astId": 2956,
				"contract": "contracts/Quest.sol:Quest",
				"label": "lastFreeMint",
				"offset": 0,
				"slot": "9",
				"type": "t_mapping(t_address,t_uint256)"
			}
		],
		"types": {
			"t_address": {
				"encoding": "inplace",
				"label": "address",
				"numberOfBytes": "20"
			},
			"t_bool": {
				"encoding": "inplace",
				"label": "bool",
				"numberOfBytes": "1"
			},
			"t_mapping(t_address,t_bool)": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => bool)",
				"numberOfBytes": "32",
				"value": "t_bool"
			},
			"t_mapping(t_address,t_mapping(t_address,t_bool))": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => mapping(address => bool))",
				"numberOfBytes": "32",
				"value": "t_mapping(t_address,t_bool)"
			},
			"t_mapping(t_address,t_uint256)": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => uint256)",
				"numberOfBytes": "32",
				"value": "t_uint256"
			},
			"t_mapping(t_uint256,t_address)": {
				"encoding": "mapping",
				"key": "t_uint256",
				"label": "mapping(uint256 => address)",
				"numberOfBytes": "32",
				"value": "t_address"
			},
			"t_string_storage": {
				"encoding": "bytes",
				"label": "string",
				"numberOfBytes": "32"
			},
			"t_uint256": {
				"encoding": "inplace",
				"label": "uint256",
				"numberOfBytes": "32"
			}
		}
	},
	"web3Deploy": "var price = /* var of type uint256 here */ ;\nvar initialOwner = /* var of type address here */ ;\nvar questContract = new web3.eth.Contract([{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFree\",\"type\":\"bool\"}],\"name\":\"NFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NFT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastFreeMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]);\nvar quest = questContract.deploy({\n     data: '0x60a060405234801562000010575f80fd5b506040516200145938038062001459833981016040819052620000339162000129565b8060405180604001604052806008815260200167145d595cdd13919560c21b815250604051806040016040528060048152602001631453919560e21b815250815f908162000082919062000205565b50600162000091828262000205565b5050506001600160a01b038116620000c257604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b620000cd81620000d8565b5050608052620002cd565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f80604083850312156200013b575f80fd5b825160208401519092506001600160a01b03811681146200015a575f80fd5b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b600181811c908216806200018e57607f821691505b602082108103620001ad57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111562000200575f81815260208120601f850160051c81016020861015620001db5750805b601f850160051c820191505b81811015620001fc57828155600101620001e7565b5050505b505050565b81516001600160401b0381111562000221576200022162000165565b620002398162000232845462000179565b84620001b3565b602080601f8311600181146200026f575f8415620002575750858301515b5f19600386901b1c1916600185901b178555620001fc565b5f85815260208120601f198616915b828110156200029f578886015182559484019460019091019084016200027e565b5085821015620002bd57878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b608051611173620002e65f395f6101ee01526111735ff3fe608060405234801561000f575f80fd5b5060043610610127575f3560e01c8063715018a6116100a9578063b88d4fde1161006e578063b88d4fde14610284578063c87b56dd14610297578063e985e9c5146102aa578063f2fde38b146102bd578063f9931855146102d0575f80fd5b8063715018a6146102315780638da5cb5b1461023957806395d89b411461024a578063a22cb46514610252578063a693b19f14610265575f80fd5b806323b872dd116100ef57806323b872dd146101b057806342842e0e146101c35780636352211e146101d6578063676dd563146101e957806370a082311461021e575f80fd5b806301ffc9a71461012b57806306fdde0314610153578063081812fc14610168578063095ea7b3146101935780631249c58b146101a8575b5f80fd5b61013e610139366004610de3565b6102ef565b60405190151581526020015b60405180910390f35b61015b610340565b60405161014a9190610e4b565b61017b610176366004610e5d565b6103cf565b6040516001600160a01b03909116815260200161014a565b6101a66101a1366004610e8f565b6103f6565b005b6101a6610405565b6101a66101be366004610eb7565b610477565b6101a66101d1366004610eb7565b610505565b61017b6101e4366004610e5d565b610524565b6102107f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161014a565b61021061022c366004610ef0565b61052e565b6101a6610573565b6006546001600160a01b031661017b565b61015b610586565b6101a6610260366004610f09565b610595565b610210610273366004610ef0565b60096020525f908152604090205481565b6101a6610292366004610f56565b6105a0565b61015b6102a5366004610e5d565b6105b7565b61013e6102b836600461102b565b610628565b6101a66102cb366004610ef0565b610655565b6102106102de366004610ef0565b60086020525f908152604090205481565b5f6001600160e01b031982166380ac58cd60e01b148061031f57506001600160e01b03198216635b5e139f60e01b145b8061033a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60605f805461034e9061105c565b80601f016020809104026020016040519081016040528092919081815260200182805461037a9061105c565b80156103c55780601f1061039c576101008083540402835291602001916103c5565b820191905f5260205f20905b8154815290600101906020018083116103a857829003601f168201915b5050505050905090565b5f6103d982610692565b505f828152600460205260409020546001600160a01b031661033a565b6104018282336106ca565b5050565b60078054905f61041483611094565b909155505060075461042633826106d7565b335f8181526009602090815260409182902042905581518481526001918101919091527f8fa3ff725d2f7190c5e5dd9bc88f241a72b239e127e347dccdfc28e44e5e0963910160405180910390a250565b6001600160a01b0382166104a557604051633250574960e11b81525f60048201526024015b60405180910390fd5b5f6104b18383336106f0565b9050836001600160a01b0316816001600160a01b0316146104ff576040516364283d7b60e01b81526001600160a01b038086166004830152602482018490528216604482015260640161049c565b50505050565b61051f83838360405180602001604052805f8152506105a0565b505050565b5f61033a82610692565b5f6001600160a01b038216610558576040516322718ad960e21b81525f600482015260240161049c565b506001600160a01b03165f9081526003602052604090205490565b61057b6107e2565b6105845f61080f565b565b60606001805461034e9061105c565b610401338383610860565b6105ab848484610477565b6104ff848484846108fe565b60606105c282610692565b505f6105d860408051602081019091525f815290565b90505f8151116105f65760405180602001604052805f815250610621565b8061060084610a24565b6040516020016106119291906110b8565b6040516020818303038152906040525b9392505050565b6001600160a01b039182165f90815260056020908152604080832093909416825291909152205460ff1690565b61065d6107e2565b6001600160a01b03811661068657604051631e4fbdf760e01b81525f600482015260240161049c565b61068f8161080f565b50565b5f818152600260205260408120546001600160a01b03168061033a57604051637e27328960e01b81526004810184905260240161049c565b61051f8383836001610ab4565b610401828260405180602001604052805f815250610bb8565b5f828152600260205260408120546001600160a01b039081169083161561071c5761071c818486610bce565b6001600160a01b03811615610756576107375f855f80610ab4565b6001600160a01b0381165f90815260036020526040902080545f190190555b6001600160a01b03851615610784576001600160a01b0385165f908152600360205260409020805460010190555b5f8481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b6006546001600160a01b031633146105845760405163118cdaa760e01b815233600482015260240161049c565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b03821661089257604051630b61174360e31b81526001600160a01b038316600482015260240161049c565b6001600160a01b038381165f81815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b156104ff57604051630a85bd0160e11b81526001600160a01b0384169063150b7a02906109409033908890879087906004016110e6565b6020604051808303815f875af192505050801561097a575060408051601f3d908101601f1916820190925261097791810190611122565b60015b6109e1573d8080156109a7576040519150601f19603f3d011682016040523d82523d5f602084013e6109ac565b606091505b5080515f036109d957604051633250574960e11b81526001600160a01b038516600482015260240161049c565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b14610a1d57604051633250574960e11b81526001600160a01b038516600482015260240161049c565b5050505050565b60605f610a3083610c32565b60010190505f8167ffffffffffffffff811115610a4f57610a4f610f42565b6040519080825280601f01601f191660200182016040528015610a79576020820181803683370190505b5090508181016020015b5f19016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610a8357509392505050565b8080610ac857506001600160a01b03821615155b15610b89575f610ad784610692565b90506001600160a01b03831615801590610b035750826001600160a01b0316816001600160a01b031614155b8015610b165750610b148184610628565b155b15610b3f5760405163a9fbf51f60e01b81526001600160a01b038416600482015260240161049c565b8115610b875783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b50505f90815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b610bc28383610d09565b61051f5f8484846108fe565b610bd9838383610d6a565b61051f576001600160a01b038316610c0757604051637e27328960e01b81526004810182905260240161049c565b60405163177e802f60e01b81526001600160a01b03831660048201526024810182905260440161049c565b5f8072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610c705772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610c9c576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610cba57662386f26fc10000830492506010015b6305f5e1008310610cd2576305f5e100830492506008015b6127108310610ce657612710830492506004015b60648310610cf8576064830492506002015b600a831061033a5760010192915050565b6001600160a01b038216610d3257604051633250574960e11b81525f600482015260240161049c565b5f610d3e83835f6106f0565b90506001600160a01b0381161561051f576040516339e3563760e11b81525f600482015260240161049c565b5f6001600160a01b03831615801590610dc65750826001600160a01b0316846001600160a01b03161480610da35750610da38484610628565b80610dc657505f828152600460205260409020546001600160a01b038481169116145b949350505050565b6001600160e01b03198116811461068f575f80fd5b5f60208284031215610df3575f80fd5b813561062181610dce565b5f5b83811015610e18578181015183820152602001610e00565b50505f910152565b5f8151808452610e37816020860160208601610dfe565b601f01601f19169290920160200192915050565b602081525f6106216020830184610e20565b5f60208284031215610e6d575f80fd5b5035919050565b80356001600160a01b0381168114610e8a575f80fd5b919050565b5f8060408385031215610ea0575f80fd5b610ea983610e74565b946020939093013593505050565b5f805f60608486031215610ec9575f80fd5b610ed284610e74565b9250610ee060208501610e74565b9150604084013590509250925092565b5f60208284031215610f00575f80fd5b61062182610e74565b5f8060408385031215610f1a575f80fd5b610f2383610e74565b915060208301358015158114610f37575f80fd5b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f805f8060808587031215610f69575f80fd5b610f7285610e74565b9350610f8060208601610e74565b925060408501359150606085013567ffffffffffffffff80821115610fa3575f80fd5b818701915087601f830112610fb6575f80fd5b813581811115610fc857610fc8610f42565b604051601f8201601f19908116603f01168101908382118183101715610ff057610ff0610f42565b816040528281528a6020848701011115611008575f80fd5b826020860160208301375f60208483010152809550505050505092959194509250565b5f806040838503121561103c575f80fd5b61104583610e74565b915061105360208401610e74565b90509250929050565b600181811c9082168061107057607f821691505b60208210810361108e57634e487b7160e01b5f52602260045260245ffd5b50919050565b5f600182016110b157634e487b7160e01b5f52601160045260245ffd5b5060010190565b5f83516110c9818460208801610dfe565b8351908301906110dd818360208801610dfe565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190525f9061111890830184610e20565b9695505050505050565b5f60208284031215611132575f80fd5b815161062181610dce56fea2646970667358221220a64cba6b232d169afbfbb9c78424acc9bd37b4eea8882368d78ad1162a5ea47064736f6c63430008140033', \n     arguments: [\n          price,\n          initialOwner,\n     ]\n}).send({\n     from: web3.eth.accounts[0], \n     gas: '4700000'\n   }, function (e, contract){\n    console.log(e, contract);\n    if (typeof contract.address !== 'undefined') {\n         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);\n    }\n })",
	"functionHashes": {
		"676dd563": "NFT_PRICE()",
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"081812fc": "getApproved(uint256)",
		"e985e9c5": "isApprovedForAll(address,address)",
		"a693b19f": "lastFreeMint(address)",
		"1249c58b": "mint()",
		"06fdde03": "name()",
		"8da5cb5b": "owner()",
		"6352211e": "ownerOf(uint256)",
		"715018a6": "renounceOwnership()",
		"42842e0e": "safeTransferFrom(address,address,uint256)",
		"b88d4fde": "safeTransferFrom(address,address,uint256,bytes)",
		"a22cb465": "setApprovalForAll(address,bool)",
		"f9931855": "stakedAmount(address)",
		"01ffc9a7": "supportsInterface(bytes4)",
		"95d89b41": "symbol()",
		"c87b56dd": "tokenURI(uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"f2fde38b": "transferOwnership(address)"
	},
	"gasEstimates": {
		"Creation": {
			"codeDepositCost": "893400",
			"executionCost": "infinite",
			"totalCost": "infinite"
		},
		"External": {
			"NFT_PRICE()": "infinite",
			"approve(address,uint256)": "31531",
			"balanceOf(address)": "2696",
			"getApproved(uint256)": "infinite",
			"isApprovedForAll(address,address)": "infinite",
			"lastFreeMint(address)": "2627",
			"mint()": "infinite",
			"name()": "infinite",
			"owner()": "2375",
			"ownerOf(uint256)": "infinite",
			"renounceOwnership()": "infinite",
			"safeTransferFrom(address,address,uint256)": "infinite",
			"safeTransferFrom(address,address,uint256,bytes)": "infinite",
			"setApprovalForAll(address,bool)": "26745",
			"stakedAmount(address)": "2626",
			"supportsInterface(bytes4)": "531",
			"symbol()": "infinite",
			"tokenURI(uint256)": "infinite",
			"transferFrom(address,address,uint256)": "infinite",
			"transferOwnership(address)": "28421"
		}
	},
	"devdoc": {
		"errors": {
			"ERC721IncorrectOwner(address,uint256,address)": [
				{
					"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
					"params": {
						"owner": "Address of the current owner of a token.",
						"sender": "Address whose tokens are being transferred.",
						"tokenId": "Identifier number of a token."
					}
				}
			],
			"ERC721InsufficientApproval(address,uint256)": [
				{
					"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
					"params": {
						"operator": "Address that may be allowed to operate on tokens without being their owner.",
						"tokenId": "Identifier number of a token."
					}
				}
			],
			"ERC721InvalidApprover(address)": [
				{
					"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
					"params": {
						"approver": "Address initiating an approval operation."
					}
				}
			],
			"ERC721InvalidOperator(address)": [
				{
					"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
					"params": {
						"operator": "Address that may be allowed to operate on tokens without being their owner."
					}
				}
			],
			"ERC721InvalidOwner(address)": [
				{
					"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
					"params": {
						"owner": "Address of the current owner of a token."
					}
				}
			],
			"ERC721InvalidReceiver(address)": [
				{
					"details": "Indicates a failure with the token `receiver`. Used in transfers.",
					"params": {
						"receiver": "Address to which tokens are being transferred."
					}
				}
			],
			"ERC721InvalidSender(address)": [
				{
					"details": "Indicates a failure with the token `sender`. Used in transfers.",
					"params": {
						"sender": "Address whose tokens are being transferred."
					}
				}
			],
			"ERC721NonexistentToken(uint256)": [
				{
					"details": "Indicates a `tokenId` whose `owner` is the zero address.",
					"params": {
						"tokenId": "Identifier number of a token."
					}
				}
			],
			"OwnableInvalidOwner(address)": [
				{
					"details": "The owner is not a valid owner account. (eg. `address(0)`)"
				}
			],
			"OwnableUnauthorizedAccount(address)": [
				{
					"details": "The caller account is not authorized to perform an operation."
				}
			]
		},
		"events": {
			"Approval(address,address,uint256)": {
				"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
			},
			"ApprovalForAll(address,address,bool)": {
				"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
			},
			"Transfer(address,address,uint256)": {
				"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
			}
		},
		"kind": "dev",
		"methods": {
			"approve(address,uint256)": {
				"details": "See {IERC721-approve}."
			},
			"balanceOf(address)": {
				"details": "See {IERC721-balanceOf}."
			},
			"getApproved(uint256)": {
				"details": "See {IERC721-getApproved}."
			},
			"isApprovedForAll(address,address)": {
				"details": "See {IERC721-isApprovedForAll}."
			},
			"name()": {
				"details": "See {IERC721Metadata-name}."
			},
			"owner()": {
				"details": "Returns the address of the current owner."
			},
			"ownerOf(uint256)": {
				"details": "See {IERC721-ownerOf}."
			},
			"renounceOwnership()": {
				"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
			},
			"safeTransferFrom(address,address,uint256)": {
				"details": "See {IERC721-safeTransferFrom}."
			},
			"safeTransferFrom(address,address,uint256,bytes)": {
				"details": "See {IERC721-safeTransferFrom}."
			},
			"setApprovalForAll(address,bool)": {
				"details": "See {IERC721-setApprovalForAll}."
			},
			"supportsInterface(bytes4)": {
				"details": "See {IERC165-supportsInterface}."
			},
			"symbol()": {
				"details": "See {IERC721Metadata-symbol}."
			},
			"tokenURI(uint256)": {
				"details": "See {IERC721Metadata-tokenURI}."
			},
			"transferFrom(address,address,uint256)": {
				"details": "See {IERC721-transferFrom}."
			},
			"transferOwnership(address)": {
				"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
			}
		},
		"version": 1
	},
	"userdoc": {
		"kind": "user",
		"methods": {},
		"version": 1
	},
	"Runtime Bytecode": {
		"functionDebugData": {
			"@NFT_PRICE_2948": {
				"entryPoint": null,
				"id": 2948,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_approve_1096": {
				"entryPoint": 1738,
				"id": 1096,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_approve_1162": {
				"entryPoint": 2740,
				"id": 1162,
				"parameterSlots": 4,
				"returnSlots": 0
			},
			"@_baseURI_489": {
				"entryPoint": null,
				"id": 489,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_checkAuthorized_744": {
				"entryPoint": 3022,
				"id": 744,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_checkOnERC721Received_1292": {
				"entryPoint": 2302,
				"id": 1292,
				"parameterSlots": 4,
				"returnSlots": 0
			},
			"@_checkOwner_84": {
				"entryPoint": 2018,
				"id": 84,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_getApproved_671": {
				"entryPoint": null,
				"id": 671,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@_isAuthorized_707": {
				"entryPoint": 3434,
				"id": 707,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"@_mint_900": {
				"entryPoint": 3337,
				"id": 900,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_msgSender_1468": {
				"entryPoint": null,
				"id": 1468,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_ownerOf_658": {
				"entryPoint": null,
				"id": 658,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@_requireOwned_1228": {
				"entryPoint": 1682,
				"id": 1228,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@_safeMint_915": {
				"entryPoint": 1751,
				"id": 915,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_safeMint_941": {
				"entryPoint": 3000,
				"id": 941,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_setApprovalForAll_1199": {
				"entryPoint": 2144,
				"id": 1199,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_transferOwnership_146": {
				"entryPoint": 2063,
				"id": 146,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@_update_850": {
				"entryPoint": 1776,
				"id": 850,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"@approve_505": {
				"entryPoint": 1014,
				"id": 505,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@balanceOf_413": {
				"entryPoint": 1326,
				"id": 413,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@getApproved_522": {
				"entryPoint": 975,
				"id": 522,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@isApprovedForAll_555": {
				"entryPoint": 1576,
				"id": 555,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@lastFreeMint_2956": {
				"entryPoint": null,
				"id": 2956,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@log10_2651": {
				"entryPoint": 3122,
				"id": 2651,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@mint_3027": {
				"entryPoint": 1029,
				"id": 3027,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@name_435": {
				"entryPoint": 832,
				"id": 435,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@ownerOf_426": {
				"entryPoint": 1316,
				"id": 426,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@owner_67": {
				"entryPoint": null,
				"id": 67,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@renounceOwnership_98": {
				"entryPoint": 1395,
				"id": 98,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@safeTransferFrom_619": {
				"entryPoint": 1285,
				"id": 619,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@safeTransferFrom_645": {
				"entryPoint": 1440,
				"id": 645,
				"parameterSlots": 4,
				"returnSlots": 0
			},
			"@setApprovalForAll_538": {
				"entryPoint": 1429,
				"id": 538,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@stakedAmount_2952": {
				"entryPoint": null,
				"id": 2952,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@supportsInterface_1764": {
				"entryPoint": null,
				"id": 1764,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@supportsInterface_385": {
				"entryPoint": 751,
				"id": 385,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@symbol_444": {
				"entryPoint": 1414,
				"id": 444,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@toString_1554": {
				"entryPoint": 2596,
				"id": 1554,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@tokenURI_480": {
				"entryPoint": 1463,
				"id": 480,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@transferFrom_601": {
				"entryPoint": 1143,
				"id": 601,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@transferOwnership_126": {
				"entryPoint": 1621,
				"id": 126,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"abi_decode_address": {
				"entryPoint": 3700,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_address": {
				"entryPoint": 3824,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_addresst_address": {
				"entryPoint": 4139,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"abi_decode_tuple_t_addresst_addresst_uint256": {
				"entryPoint": 3767,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 3
			},
			"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr": {
				"entryPoint": 3926,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 4
			},
			"abi_decode_tuple_t_addresst_bool": {
				"entryPoint": 3849,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"abi_decode_tuple_t_addresst_uint256": {
				"entryPoint": 3727,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"abi_decode_tuple_t_bytes4": {
				"entryPoint": 3555,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_bytes4_fromMemory": {
				"entryPoint": 4386,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_uint256": {
				"entryPoint": 3677,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_string": {
				"entryPoint": 3616,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
				"entryPoint": 4280,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
				"entryPoint": 4326,
				"id": null,
				"parameterSlots": 5,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 4,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 3659,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint256_t_bool__to_t_uint256_t_bool__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"copy_memory_to_memory_with_cleanup": {
				"entryPoint": 3582,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"extract_byte_array_length": {
				"entryPoint": 4188,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"increment_t_uint256": {
				"entryPoint": 4244,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"panic_error_0x12": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x41": {
				"entryPoint": 3906,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"validator_revert_bytes4": {
				"entryPoint": 3534,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			}
		},
		"generatedSources": [
			{
				"ast": {
					"nodeType": "YulBlock",
					"src": "0:7698:13",
					"statements": [
						{
							"nodeType": "YulBlock",
							"src": "6:3:13",
							"statements": []
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "58:87:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "123:16:13",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "132:1:13",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "135:1:13",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "125:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "125:12:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "125:12:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "81:5:13"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "92:5:13"
																},
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "103:3:13",
																			"type": "",
																			"value": "224"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "108:10:13",
																			"type": "",
																			"value": "0xffffffff"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nodeType": "YulIdentifier",
																		"src": "99:3:13"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "99:20:13"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "88:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "88:32:13"
														}
													],
													"functionName": {
														"name": "eq",
														"nodeType": "YulIdentifier",
														"src": "78:2:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "78:43:13"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "71:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "71:51:13"
										},
										"nodeType": "YulIf",
										"src": "68:71:13"
									}
								]
							},
							"name": "validator_revert_bytes4",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "47:5:13",
									"type": ""
								}
							],
							"src": "14:131:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "219:176:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "265:16:13",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "274:1:13",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "277:1:13",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "267:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "267:12:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "267:12:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "240:7:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "249:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "236:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "236:23:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "261:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "232:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "232:32:13"
										},
										"nodeType": "YulIf",
										"src": "229:52:13"
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "290:36:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "316:9:13"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nodeType": "YulIdentifier",
												"src": "303:12:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "303:23:13"
										},
										"variables": [
											{
												"name": "value",
												"nodeType": "YulTypedName",
												"src": "294:5:13",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "359:5:13"
												}
											],
											"functionName": {
												"name": "validator_revert_bytes4",
												"nodeType": "YulIdentifier",
												"src": "335:23:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "335:30:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "335:30:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "374:15:13",
										"value": {
											"name": "value",
											"nodeType": "YulIdentifier",
											"src": "384:5:13"
										},
										"variableNames": [
											{
												"name": "value0",
												"nodeType": "YulIdentifier",
												"src": "374:6:13"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_bytes4",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "185:9:13",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "196:7:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "208:6:13",
									"type": ""
								}
							],
							"src": "150:245:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "495:92:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "505:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "517:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "528:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "513:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "513:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "505:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "547:9:13"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "572:6:13"
																}
															],
															"functionName": {
																"name": "iszero",
																"nodeType": "YulIdentifier",
																"src": "565:6:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "565:14:13"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "558:6:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "558:22:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "540:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "540:41:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "540:41:13"
									}
								]
							},
							"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "464:9:13",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "475:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "486:4:13",
									"type": ""
								}
							],
							"src": "400:187:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "658:184:13",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "668:10:13",
										"value": {
											"kind": "number",
											"nodeType": "YulLiteral",
											"src": "677:1:13",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "i",
												"nodeType": "YulTypedName",
												"src": "672:1:13",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "737:63:13",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "762:3:13"
																	},
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "767:1:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "758:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "758:11:13"
															},
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "781:3:13"
																			},
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "786:1:13"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "777:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "777:11:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "771:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "771:18:13"
															}
														],
														"functionName": {
															"name": "mstore",
															"nodeType": "YulIdentifier",
															"src": "751:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "751:39:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "751:39:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "i",
													"nodeType": "YulIdentifier",
													"src": "698:1:13"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "701:6:13"
												}
											],
											"functionName": {
												"name": "lt",
												"nodeType": "YulIdentifier",
												"src": "695:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "695:13:13"
										},
										"nodeType": "YulForLoop",
										"post": {
											"nodeType": "YulBlock",
											"src": "709:19:13",
											"statements": [
												{
													"nodeType": "YulAssignment",
													"src": "711:15:13",
													"value": {
														"arguments": [
															{
																"name": "i",
																"nodeType": "YulIdentifier",
																"src": "720:1:13"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "723:2:13",
																"type": "",
																"value": "32"
															}
														],
														"functionName": {
															"name": "add",
															"nodeType": "YulIdentifier",
															"src": "716:3:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "716:10:13"
													},
													"variableNames": [
														{
															"name": "i",
															"nodeType": "YulIdentifier",
															"src": "711:1:13"
														}
													]
												}
											]
										},
										"pre": {
											"nodeType": "YulBlock",
											"src": "691:3:13",
											"statements": []
										},
										"src": "687:113:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dst",
															"nodeType": "YulIdentifier",
															"src": "820:3:13"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "825:6:13"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "816:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "816:16:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "834:1:13",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "809:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "809:27:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "809:27:13"
									}
								]
							},
							"name": "copy_memory_to_memory_with_cleanup",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "src",
									"nodeType": "YulTypedName",
									"src": "636:3:13",
									"type": ""
								},
								{
									"name": "dst",
									"nodeType": "YulTypedName",
									"src": "641:3:13",
									"type": ""
								},
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "646:6:13",
									"type": ""
								}
							],
							"src": "592:250:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "897:221:13",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "907:26:13",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "927:5:13"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "921:5:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "921:12:13"
										},
										"variables": [
											{
												"name": "length",
												"nodeType": "YulTypedName",
												"src": "911:6:13",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "949:3:13"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "954:6:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "942:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "942:19:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "942:19:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "1009:5:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1016:4:13",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "1005:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "1005:16:13"
												},
												{
													"arguments": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "1027:3:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1032:4:13",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "1023:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "1023:14:13"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "1039:6:13"
												}
											],
											"functionName": {
												"name": "copy_memory_to_memory_with_cleanup",
												"nodeType": "YulIdentifier",
												"src": "970:34:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "970:76:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "970:76:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "1055:57:13",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "1070:3:13"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "length",
																			"nodeType": "YulIdentifier",
																			"src": "1083:6:13"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "1091:2:13",
																			"type": "",
																			"value": "31"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "1079:3:13"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "1079:15:13"
																},
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "1100:2:13",
																			"type": "",
																			"value": "31"
																		}
																	],
																	"functionName": {
																		"name": "not",
																		"nodeType": "YulIdentifier",
																		"src": "1096:3:13"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "1096:7:13"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "1075:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "1075:29:13"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "1066:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "1066:39:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1107:4:13",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "1062:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "1062:50:13"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "1055:3:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_string",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "874:5:13",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "881:3:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "889:3:13",
									"type": ""
								}
							],
							"src": "847:271:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1244:99:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "1261:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1272:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "1254:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "1254:21:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "1254:21:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "1284:53:13",
										"value": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "1310:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "1322:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1333:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "1318:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "1318:18:13"
												}
											],
											"functionName": {
												"name": "abi_encode_string",
												"nodeType": "YulIdentifier",
												"src": "1292:17:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "1292:45:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "1284:4:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "1213:9:13",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "1224:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "1235:4:13",
									"type": ""
								}
							],
							"src": "1123:220:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1418:110:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "1464:16:13",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1473:1:13",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1476:1:13",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "1466:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "1466:12:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "1466:12:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "1439:7:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "1448:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "1435:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "1435:23:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1460:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "1431:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "1431:32:13"
										},
										"nodeType": "YulIf",
										"src": "1428:52:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "1489:33:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "1512:9:13"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nodeType": "YulIdentifier",
												"src": "1499:12:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "1499:23:13"
										},
										"variableNames": [
											{
												"name": "value0",
												"nodeType": "YulIdentifier",
												"src": "1489:6:13"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "1384:9:13",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "1395:7:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "1407:6:13",
									"type": ""
								}
							],
							"src": "1348:180:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1634:102:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "1644:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "1656:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1667:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "1652:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "1652:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "1644:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "1686:9:13"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "1701:6:13"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "1717:3:13",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "1722:1:13",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nodeType": "YulIdentifier",
																		"src": "1713:3:13"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "1713:11:13"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "1726:1:13",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "1709:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "1709:19:13"
														}
													],
													"functionName": {
														"name": "and",
														"nodeType": "YulIdentifier",
														"src": "1697:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "1697:32:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "1679:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "1679:51:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "1679:51:13"
									}
								]
							},
							"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "1603:9:13",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "1614:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "1625:4:13",
									"type": ""
								}
							],
							"src": "1533:203:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1790:124:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "1800:29:13",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "1822:6:13"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nodeType": "YulIdentifier",
												"src": "1809:12:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "1809:20:13"
										},
										"variableNames": [
											{
												"name": "value",
												"nodeType": "YulIdentifier",
												"src": "1800:5:13"
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "1892:16:13",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1901:1:13",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1904:1:13",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "1894:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "1894:12:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "1894:12:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "1851:5:13"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1862:5:13"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1877:3:13",
																					"type": "",
																					"value": "160"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1882:1:13",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "shl",
																				"nodeType": "YulIdentifier",
																				"src": "1873:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1873:11:13"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "1886:1:13",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "sub",
																		"nodeType": "YulIdentifier",
																		"src": "1869:3:13"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "1869:19:13"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "1858:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "1858:31:13"
														}
													],
													"functionName": {
														"name": "eq",
														"nodeType": "YulIdentifier",
														"src": "1848:2:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "1848:42:13"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "1841:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "1841:50:13"
										},
										"nodeType": "YulIf",
										"src": "1838:70:13"
									}
								]
							},
							"name": "abi_decode_address",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "1769:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "1780:5:13",
									"type": ""
								}
							],
							"src": "1741:173:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2006:167:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "2052:16:13",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2061:1:13",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2064:1:13",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "2054:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "2054:12:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "2054:12:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "2027:7:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2036:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "2023:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "2023:23:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2048:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "2019:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2019:32:13"
										},
										"nodeType": "YulIf",
										"src": "2016:52:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "2077:39:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "2106:9:13"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nodeType": "YulIdentifier",
												"src": "2087:18:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2087:29:13"
										},
										"variableNames": [
											{
												"name": "value0",
												"nodeType": "YulIdentifier",
												"src": "2077:6:13"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "2125:42:13",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2152:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "2163:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "2148:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "2148:18:13"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nodeType": "YulIdentifier",
												"src": "2135:12:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2135:32:13"
										},
										"variableNames": [
											{
												"name": "value1",
												"nodeType": "YulIdentifier",
												"src": "2125:6:13"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "1964:9:13",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "1975:7:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "1987:6:13",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "1995:6:13",
									"type": ""
								}
							],
							"src": "1919:254:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2282:224:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "2328:16:13",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2337:1:13",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2340:1:13",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "2330:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "2330:12:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "2330:12:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "2303:7:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2312:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "2299:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "2299:23:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2324:2:13",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "2295:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2295:32:13"
										},
										"nodeType": "YulIf",
										"src": "2292:52:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "2353:39:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "2382:9:13"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nodeType": "YulIdentifier",
												"src": "2363:18:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2363:29:13"
										},
										"variableNames": [
											{
												"name": "value0",
												"nodeType": "YulIdentifier",
												"src": "2353:6:13"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "2401:48:13",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2434:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "2445:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "2430:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "2430:18:13"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nodeType": "YulIdentifier",
												"src": "2411:18:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2411:38:13"
										},
										"variableNames": [
											{
												"name": "value1",
												"nodeType": "YulIdentifier",
												"src": "2401:6:13"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "2458:42:13",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2485:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "2496:2:13",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "2481:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "2481:18:13"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nodeType": "YulIdentifier",
												"src": "2468:12:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2468:32:13"
										},
										"variableNames": [
											{
												"name": "value2",
												"nodeType": "YulIdentifier",
												"src": "2458:6:13"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_addresst_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "2232:9:13",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "2243:7:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "2255:6:13",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "2263:6:13",
									"type": ""
								},
								{
									"name": "value2",
									"nodeType": "YulTypedName",
									"src": "2271:6:13",
									"type": ""
								}
							],
							"src": "2178:328:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2612:76:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "2622:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "2634:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2645:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "2630:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2630:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "2622:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "2664:9:13"
												},
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "2675:6:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "2657:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2657:25:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "2657:25:13"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "2581:9:13",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "2592:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "2603:4:13",
									"type": ""
								}
							],
							"src": "2511:177:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2763:116:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "2809:16:13",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2818:1:13",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2821:1:13",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "2811:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "2811:12:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "2811:12:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "2784:7:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2793:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "2780:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "2780:23:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2805:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "2776:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2776:32:13"
										},
										"nodeType": "YulIf",
										"src": "2773:52:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "2834:39:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "2863:9:13"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nodeType": "YulIdentifier",
												"src": "2844:18:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2844:29:13"
										},
										"variableNames": [
											{
												"name": "value0",
												"nodeType": "YulIdentifier",
												"src": "2834:6:13"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_address",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "2729:9:13",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "2740:7:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "2752:6:13",
									"type": ""
								}
							],
							"src": "2693:186:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2968:263:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "3014:16:13",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3023:1:13",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3026:1:13",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "3016:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "3016:12:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "3016:12:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "2989:7:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2998:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "2985:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "2985:23:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3010:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "2981:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "2981:32:13"
										},
										"nodeType": "YulIf",
										"src": "2978:52:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "3039:39:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "3068:9:13"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nodeType": "YulIdentifier",
												"src": "3049:18:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "3049:29:13"
										},
										"variableNames": [
											{
												"name": "value0",
												"nodeType": "YulIdentifier",
												"src": "3039:6:13"
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "3087:45:13",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "3117:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "3128:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "3113:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "3113:18:13"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nodeType": "YulIdentifier",
												"src": "3100:12:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "3100:32:13"
										},
										"variables": [
											{
												"name": "value",
												"nodeType": "YulTypedName",
												"src": "3091:5:13",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "3185:16:13",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3194:1:13",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3197:1:13",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "3187:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "3187:12:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "3187:12:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "3154:5:13"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "value",
																			"nodeType": "YulIdentifier",
																			"src": "3175:5:13"
																		}
																	],
																	"functionName": {
																		"name": "iszero",
																		"nodeType": "YulIdentifier",
																		"src": "3168:6:13"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "3168:13:13"
																}
															],
															"functionName": {
																"name": "iszero",
																"nodeType": "YulIdentifier",
																"src": "3161:6:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "3161:21:13"
														}
													],
													"functionName": {
														"name": "eq",
														"nodeType": "YulIdentifier",
														"src": "3151:2:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "3151:32:13"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "3144:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "3144:40:13"
										},
										"nodeType": "YulIf",
										"src": "3141:60:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "3210:15:13",
										"value": {
											"name": "value",
											"nodeType": "YulIdentifier",
											"src": "3220:5:13"
										},
										"variableNames": [
											{
												"name": "value1",
												"nodeType": "YulIdentifier",
												"src": "3210:6:13"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_bool",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "2926:9:13",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "2937:7:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "2949:6:13",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "2957:6:13",
									"type": ""
								}
							],
							"src": "2884:347:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3268:95:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3285:1:13",
													"type": "",
													"value": "0"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "3292:3:13",
															"type": "",
															"value": "224"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "3297:10:13",
															"type": "",
															"value": "0x4e487b71"
														}
													],
													"functionName": {
														"name": "shl",
														"nodeType": "YulIdentifier",
														"src": "3288:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "3288:20:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "3278:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "3278:31:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "3278:31:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3325:1:13",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3328:4:13",
													"type": "",
													"value": "0x41"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "3318:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "3318:15:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "3318:15:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3349:1:13",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3352:4:13",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "3342:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "3342:15:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "3342:15:13"
									}
								]
							},
							"name": "panic_error_0x41",
							"nodeType": "YulFunctionDefinition",
							"src": "3236:127:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3498:1008:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "3545:16:13",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3554:1:13",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3557:1:13",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "3547:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "3547:12:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "3547:12:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "3519:7:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "3528:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "3515:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "3515:23:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3540:3:13",
													"type": "",
													"value": "128"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "3511:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "3511:33:13"
										},
										"nodeType": "YulIf",
										"src": "3508:53:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "3570:39:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "3599:9:13"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nodeType": "YulIdentifier",
												"src": "3580:18:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "3580:29:13"
										},
										"variableNames": [
											{
												"name": "value0",
												"nodeType": "YulIdentifier",
												"src": "3570:6:13"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "3618:48:13",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "3651:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "3662:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "3647:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "3647:18:13"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nodeType": "YulIdentifier",
												"src": "3628:18:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "3628:38:13"
										},
										"variableNames": [
											{
												"name": "value1",
												"nodeType": "YulIdentifier",
												"src": "3618:6:13"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "3675:42:13",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "3702:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "3713:2:13",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "3698:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "3698:18:13"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nodeType": "YulIdentifier",
												"src": "3685:12:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "3685:32:13"
										},
										"variableNames": [
											{
												"name": "value2",
												"nodeType": "YulIdentifier",
												"src": "3675:6:13"
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "3726:46:13",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "3757:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "3768:2:13",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "3753:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "3753:18:13"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nodeType": "YulIdentifier",
												"src": "3740:12:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "3740:32:13"
										},
										"variables": [
											{
												"name": "offset",
												"nodeType": "YulTypedName",
												"src": "3730:6:13",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "3781:28:13",
										"value": {
											"kind": "number",
											"nodeType": "YulLiteral",
											"src": "3791:18:13",
											"type": "",
											"value": "0xffffffffffffffff"
										},
										"variables": [
											{
												"name": "_1",
												"nodeType": "YulTypedName",
												"src": "3785:2:13",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "3836:16:13",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3845:1:13",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3848:1:13",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "3838:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "3838:12:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "3838:12:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "3824:6:13"
												},
												{
													"name": "_1",
													"nodeType": "YulIdentifier",
													"src": "3832:2:13"
												}
											],
											"functionName": {
												"name": "gt",
												"nodeType": "YulIdentifier",
												"src": "3821:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "3821:14:13"
										},
										"nodeType": "YulIf",
										"src": "3818:34:13"
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "3861:32:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "3875:9:13"
												},
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "3886:6:13"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "3871:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "3871:22:13"
										},
										"variables": [
											{
												"name": "_2",
												"nodeType": "YulTypedName",
												"src": "3865:2:13",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "3941:16:13",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3950:1:13",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3953:1:13",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "3943:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "3943:12:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "3943:12:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "_2",
																	"nodeType": "YulIdentifier",
																	"src": "3920:2:13"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "3924:4:13",
																	"type": "",
																	"value": "0x1f"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "3916:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "3916:13:13"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "3931:7:13"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "3912:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "3912:27:13"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "3905:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "3905:35:13"
										},
										"nodeType": "YulIf",
										"src": "3902:55:13"
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "3966:26:13",
										"value": {
											"arguments": [
												{
													"name": "_2",
													"nodeType": "YulIdentifier",
													"src": "3989:2:13"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nodeType": "YulIdentifier",
												"src": "3976:12:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "3976:16:13"
										},
										"variables": [
											{
												"name": "_3",
												"nodeType": "YulTypedName",
												"src": "3970:2:13",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "4015:22:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x41",
															"nodeType": "YulIdentifier",
															"src": "4017:16:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "4017:18:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "4017:18:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "_3",
													"nodeType": "YulIdentifier",
													"src": "4007:2:13"
												},
												{
													"name": "_1",
													"nodeType": "YulIdentifier",
													"src": "4011:2:13"
												}
											],
											"functionName": {
												"name": "gt",
												"nodeType": "YulIdentifier",
												"src": "4004:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "4004:10:13"
										},
										"nodeType": "YulIf",
										"src": "4001:36:13"
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "4046:17:13",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4060:2:13",
													"type": "",
													"value": "31"
												}
											],
											"functionName": {
												"name": "not",
												"nodeType": "YulIdentifier",
												"src": "4056:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "4056:7:13"
										},
										"variables": [
											{
												"name": "_4",
												"nodeType": "YulTypedName",
												"src": "4050:2:13",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "4072:23:13",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4092:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "4086:5:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "4086:9:13"
										},
										"variables": [
											{
												"name": "memPtr",
												"nodeType": "YulTypedName",
												"src": "4076:6:13",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "4104:71:13",
										"value": {
											"arguments": [
												{
													"name": "memPtr",
													"nodeType": "YulIdentifier",
													"src": "4126:6:13"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"name": "_3",
																					"nodeType": "YulIdentifier",
																					"src": "4150:2:13"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4154:4:13",
																					"type": "",
																					"value": "0x1f"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "4146:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4146:13:13"
																		},
																		{
																			"name": "_4",
																			"nodeType": "YulIdentifier",
																			"src": "4161:2:13"
																		}
																	],
																	"functionName": {
																		"name": "and",
																		"nodeType": "YulIdentifier",
																		"src": "4142:3:13"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "4142:22:13"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "4166:2:13",
																	"type": "",
																	"value": "63"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "4138:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "4138:31:13"
														},
														{
															"name": "_4",
															"nodeType": "YulIdentifier",
															"src": "4171:2:13"
														}
													],
													"functionName": {
														"name": "and",
														"nodeType": "YulIdentifier",
														"src": "4134:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "4134:40:13"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "4122:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "4122:53:13"
										},
										"variables": [
											{
												"name": "newFreePtr",
												"nodeType": "YulTypedName",
												"src": "4108:10:13",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "4234:22:13",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x41",
															"nodeType": "YulIdentifier",
															"src": "4236:16:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "4236:18:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "4236:18:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "newFreePtr",
															"nodeType": "YulIdentifier",
															"src": "4193:10:13"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "4205:2:13"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "4190:2:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "4190:18:13"
												},
												{
													"arguments": [
														{
															"name": "newFreePtr",
															"nodeType": "YulIdentifier",
															"src": "4213:10:13"
														},
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "4225:6:13"
														}
													],
													"functionName": {
														"name": "lt",
														"nodeType": "YulIdentifier",
														"src": "4210:2:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "4210:22:13"
												}
											],
											"functionName": {
												"name": "or",
												"nodeType": "YulIdentifier",
												"src": "4187:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "4187:46:13"
										},
										"nodeType": "YulIf",
										"src": "4184:72:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4272:2:13",
													"type": "",
													"value": "64"
												},
												{
													"name": "newFreePtr",
													"nodeType": "YulIdentifier",
													"src": "4276:10:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "4265:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "4265:22:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "4265:22:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "memPtr",
													"nodeType": "YulIdentifier",
													"src": "4303:6:13"
												},
												{
													"name": "_3",
													"nodeType": "YulIdentifier",
													"src": "4311:2:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "4296:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "4296:18:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "4296:18:13"
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "4360:16:13",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4369:1:13",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4372:1:13",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "4362:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "4362:12:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "4362:12:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "_2",
																	"nodeType": "YulIdentifier",
																	"src": "4337:2:13"
																},
																{
																	"name": "_3",
																	"nodeType": "YulIdentifier",
																	"src": "4341:2:13"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "4333:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "4333:11:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4346:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "4329:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "4329:20:13"
												},
												{
													"name": "dataEnd",
													"nodeType": "YulIdentifier",
													"src": "4351:7:13"
												}
											],
											"functionName": {
												"name": "gt",
												"nodeType": "YulIdentifier",
												"src": "4326:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "4326:33:13"
										},
										"nodeType": "YulIf",
										"src": "4323:53:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "4402:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4410:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "4398:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "4398:15:13"
												},
												{
													"arguments": [
														{
															"name": "_2",
															"nodeType": "YulIdentifier",
															"src": "4419:2:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4423:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "4415:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "4415:11:13"
												},
												{
													"name": "_3",
													"nodeType": "YulIdentifier",
													"src": "4428:2:13"
												}
											],
											"functionName": {
												"name": "calldatacopy",
												"nodeType": "YulIdentifier",
												"src": "4385:12:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "4385:46:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "4385:46:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "4455:6:13"
																},
																{
																	"name": "_3",
																	"nodeType": "YulIdentifier",
																	"src": "4463:2:13"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "4451:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "4451:15:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4468:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "4447:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "4447:24:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4473:1:13",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "4440:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "4440:35:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "4440:35:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "4484:16:13",
										"value": {
											"name": "memPtr",
											"nodeType": "YulIdentifier",
											"src": "4494:6:13"
										},
										"variableNames": [
											{
												"name": "value3",
												"nodeType": "YulIdentifier",
												"src": "4484:6:13"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "3440:9:13",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "3451:7:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "3463:6:13",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "3471:6:13",
									"type": ""
								},
								{
									"name": "value2",
									"nodeType": "YulTypedName",
									"src": "3479:6:13",
									"type": ""
								},
								{
									"name": "value3",
									"nodeType": "YulTypedName",
									"src": "3487:6:13",
									"type": ""
								}
							],
							"src": "3368:1138:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "4598:173:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "4644:16:13",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4653:1:13",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4656:1:13",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "4646:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "4646:12:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "4646:12:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "4619:7:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4628:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "4615:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "4615:23:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4640:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "4611:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "4611:32:13"
										},
										"nodeType": "YulIf",
										"src": "4608:52:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "4669:39:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "4698:9:13"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nodeType": "YulIdentifier",
												"src": "4679:18:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "4679:29:13"
										},
										"variableNames": [
											{
												"name": "value0",
												"nodeType": "YulIdentifier",
												"src": "4669:6:13"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "4717:48:13",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4750:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4761:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "4746:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "4746:18:13"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nodeType": "YulIdentifier",
												"src": "4727:18:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "4727:38:13"
										},
										"variableNames": [
											{
												"name": "value1",
												"nodeType": "YulIdentifier",
												"src": "4717:6:13"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_address",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "4556:9:13",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "4567:7:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "4579:6:13",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "4587:6:13",
									"type": ""
								}
							],
							"src": "4511:260:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "4831:325:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "4841:22:13",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4855:1:13",
													"type": "",
													"value": "1"
												},
												{
													"name": "data",
													"nodeType": "YulIdentifier",
													"src": "4858:4:13"
												}
											],
											"functionName": {
												"name": "shr",
												"nodeType": "YulIdentifier",
												"src": "4851:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "4851:12:13"
										},
										"variableNames": [
											{
												"name": "length",
												"nodeType": "YulIdentifier",
												"src": "4841:6:13"
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "4872:38:13",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nodeType": "YulIdentifier",
													"src": "4902:4:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4908:1:13",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "and",
												"nodeType": "YulIdentifier",
												"src": "4898:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "4898:12:13"
										},
										"variables": [
											{
												"name": "outOfPlaceEncoding",
												"nodeType": "YulTypedName",
												"src": "4876:18:13",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "4949:31:13",
											"statements": [
												{
													"nodeType": "YulAssignment",
													"src": "4951:27:13",
													"value": {
														"arguments": [
															{
																"name": "length",
																"nodeType": "YulIdentifier",
																"src": "4965:6:13"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4973:4:13",
																"type": "",
																"value": "0x7f"
															}
														],
														"functionName": {
															"name": "and",
															"nodeType": "YulIdentifier",
															"src": "4961:3:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "4961:17:13"
													},
													"variableNames": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "4951:6:13"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nodeType": "YulIdentifier",
													"src": "4929:18:13"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "4922:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "4922:26:13"
										},
										"nodeType": "YulIf",
										"src": "4919:61:13"
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "5039:111:13",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5060:1:13",
																"type": "",
																"value": "0"
															},
															{
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5067:3:13",
																		"type": "",
																		"value": "224"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5072:10:13",
																		"type": "",
																		"value": "0x4e487b71"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5063:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5063:20:13"
															}
														],
														"functionName": {
															"name": "mstore",
															"nodeType": "YulIdentifier",
															"src": "5053:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "5053:31:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "5053:31:13"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5104:1:13",
																"type": "",
																"value": "4"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5107:4:13",
																"type": "",
																"value": "0x22"
															}
														],
														"functionName": {
															"name": "mstore",
															"nodeType": "YulIdentifier",
															"src": "5097:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "5097:15:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "5097:15:13"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5132:1:13",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5135:4:13",
																"type": "",
																"value": "0x24"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "5125:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "5125:15:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "5125:15:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nodeType": "YulIdentifier",
													"src": "4995:18:13"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "5018:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "5026:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "lt",
														"nodeType": "YulIdentifier",
														"src": "5015:2:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "5015:14:13"
												}
											],
											"functionName": {
												"name": "eq",
												"nodeType": "YulIdentifier",
												"src": "4992:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "4992:38:13"
										},
										"nodeType": "YulIf",
										"src": "4989:161:13"
									}
								]
							},
							"name": "extract_byte_array_length",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nodeType": "YulTypedName",
									"src": "4811:4:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "4820:6:13",
									"type": ""
								}
							],
							"src": "4776:380:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "5208:185:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "5247:111:13",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5268:1:13",
																"type": "",
																"value": "0"
															},
															{
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5275:3:13",
																		"type": "",
																		"value": "224"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5280:10:13",
																		"type": "",
																		"value": "0x4e487b71"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5271:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5271:20:13"
															}
														],
														"functionName": {
															"name": "mstore",
															"nodeType": "YulIdentifier",
															"src": "5261:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "5261:31:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "5261:31:13"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5312:1:13",
																"type": "",
																"value": "4"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5315:4:13",
																"type": "",
																"value": "0x11"
															}
														],
														"functionName": {
															"name": "mstore",
															"nodeType": "YulIdentifier",
															"src": "5305:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "5305:15:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "5305:15:13"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5340:1:13",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5343:4:13",
																"type": "",
																"value": "0x24"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "5333:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "5333:15:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "5333:15:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "5224:5:13"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "5235:1:13",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "not",
														"nodeType": "YulIdentifier",
														"src": "5231:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "5231:6:13"
												}
											],
											"functionName": {
												"name": "eq",
												"nodeType": "YulIdentifier",
												"src": "5221:2:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "5221:17:13"
										},
										"nodeType": "YulIf",
										"src": "5218:140:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "5367:20:13",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "5378:5:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5385:1:13",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "5374:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "5374:13:13"
										},
										"variableNames": [
											{
												"name": "ret",
												"nodeType": "YulIdentifier",
												"src": "5367:3:13"
											}
										]
									}
								]
							},
							"name": "increment_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "5190:5:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "ret",
									"nodeType": "YulTypedName",
									"src": "5200:3:13",
									"type": ""
								}
							],
							"src": "5161:232:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "5521:135:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "5531:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "5543:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5554:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "5539:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "5539:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "5531:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "5573:9:13"
												},
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "5584:6:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "5566:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "5566:25:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "5566:25:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "5611:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "5622:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "5607:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "5607:18:13"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "5641:6:13"
																}
															],
															"functionName": {
																"name": "iszero",
																"nodeType": "YulIdentifier",
																"src": "5634:6:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "5634:14:13"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "5627:6:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "5627:22:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "5600:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "5600:50:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "5600:50:13"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256_t_bool__to_t_uint256_t_bool__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "5482:9:13",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "5493:6:13",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "5501:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "5512:4:13",
									"type": ""
								}
							],
							"src": "5398:258:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "5818:218:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "5828:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "5840:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5851:2:13",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "5836:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "5836:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "5828:4:13"
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "5863:29:13",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "5881:3:13",
															"type": "",
															"value": "160"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "5886:1:13",
															"type": "",
															"value": "1"
														}
													],
													"functionName": {
														"name": "shl",
														"nodeType": "YulIdentifier",
														"src": "5877:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "5877:11:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5890:1:13",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "sub",
												"nodeType": "YulIdentifier",
												"src": "5873:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "5873:19:13"
										},
										"variables": [
											{
												"name": "_1",
												"nodeType": "YulTypedName",
												"src": "5867:2:13",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "5908:9:13"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "5923:6:13"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "5931:2:13"
														}
													],
													"functionName": {
														"name": "and",
														"nodeType": "YulIdentifier",
														"src": "5919:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "5919:15:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "5901:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "5901:34:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "5901:34:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "5955:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "5966:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "5951:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "5951:18:13"
												},
												{
													"name": "value1",
													"nodeType": "YulIdentifier",
													"src": "5971:6:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "5944:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "5944:34:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "5944:34:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "5998:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "6009:2:13",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "5994:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "5994:18:13"
												},
												{
													"arguments": [
														{
															"name": "value2",
															"nodeType": "YulIdentifier",
															"src": "6018:6:13"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "6026:2:13"
														}
													],
													"functionName": {
														"name": "and",
														"nodeType": "YulIdentifier",
														"src": "6014:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "6014:15:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "5987:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "5987:43:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "5987:43:13"
									}
								]
							},
							"name": "abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "5771:9:13",
									"type": ""
								},
								{
									"name": "value2",
									"nodeType": "YulTypedName",
									"src": "5782:6:13",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "5790:6:13",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "5798:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "5809:4:13",
									"type": ""
								}
							],
							"src": "5661:375:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "6228:309:13",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "6238:27:13",
										"value": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "6258:6:13"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "6252:5:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "6252:13:13"
										},
										"variables": [
											{
												"name": "length",
												"nodeType": "YulTypedName",
												"src": "6242:6:13",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "6313:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "6321:4:13",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "6309:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "6309:17:13"
												},
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "6328:3:13"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "6333:6:13"
												}
											],
											"functionName": {
												"name": "copy_memory_to_memory_with_cleanup",
												"nodeType": "YulIdentifier",
												"src": "6274:34:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "6274:66:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "6274:66:13"
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "6349:29:13",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "6366:3:13"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "6371:6:13"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "6362:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "6362:16:13"
										},
										"variables": [
											{
												"name": "end_1",
												"nodeType": "YulTypedName",
												"src": "6353:5:13",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "6387:29:13",
										"value": {
											"arguments": [
												{
													"name": "value1",
													"nodeType": "YulIdentifier",
													"src": "6409:6:13"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "6403:5:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "6403:13:13"
										},
										"variables": [
											{
												"name": "length_1",
												"nodeType": "YulTypedName",
												"src": "6391:8:13",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value1",
															"nodeType": "YulIdentifier",
															"src": "6464:6:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "6472:4:13",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "6460:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "6460:17:13"
												},
												{
													"name": "end_1",
													"nodeType": "YulIdentifier",
													"src": "6479:5:13"
												},
												{
													"name": "length_1",
													"nodeType": "YulIdentifier",
													"src": "6486:8:13"
												}
											],
											"functionName": {
												"name": "copy_memory_to_memory_with_cleanup",
												"nodeType": "YulIdentifier",
												"src": "6425:34:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "6425:70:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "6425:70:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "6504:27:13",
										"value": {
											"arguments": [
												{
													"name": "end_1",
													"nodeType": "YulIdentifier",
													"src": "6515:5:13"
												},
												{
													"name": "length_1",
													"nodeType": "YulIdentifier",
													"src": "6522:8:13"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "6511:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "6511:20:13"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "6504:3:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "6196:3:13",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "6201:6:13",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "6209:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "6220:3:13",
									"type": ""
								}
							],
							"src": "6041:496:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "6745:286:13",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "6755:29:13",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "6773:3:13",
															"type": "",
															"value": "160"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "6778:1:13",
															"type": "",
															"value": "1"
														}
													],
													"functionName": {
														"name": "shl",
														"nodeType": "YulIdentifier",
														"src": "6769:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "6769:11:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6782:1:13",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "sub",
												"nodeType": "YulIdentifier",
												"src": "6765:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "6765:19:13"
										},
										"variables": [
											{
												"name": "_1",
												"nodeType": "YulTypedName",
												"src": "6759:2:13",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "6800:9:13"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "6815:6:13"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "6823:2:13"
														}
													],
													"functionName": {
														"name": "and",
														"nodeType": "YulIdentifier",
														"src": "6811:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "6811:15:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "6793:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "6793:34:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "6793:34:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "6847:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "6858:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "6843:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "6843:18:13"
												},
												{
													"arguments": [
														{
															"name": "value1",
															"nodeType": "YulIdentifier",
															"src": "6867:6:13"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "6875:2:13"
														}
													],
													"functionName": {
														"name": "and",
														"nodeType": "YulIdentifier",
														"src": "6863:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "6863:15:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "6836:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "6836:43:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "6836:43:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "6899:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "6910:2:13",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "6895:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "6895:18:13"
												},
												{
													"name": "value2",
													"nodeType": "YulIdentifier",
													"src": "6915:6:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "6888:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "6888:34:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "6888:34:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "6942:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "6953:2:13",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "6938:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "6938:18:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6958:3:13",
													"type": "",
													"value": "128"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "6931:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "6931:31:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "6931:31:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "6971:54:13",
										"value": {
											"arguments": [
												{
													"name": "value3",
													"nodeType": "YulIdentifier",
													"src": "6997:6:13"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "7009:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "7020:3:13",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "7005:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "7005:19:13"
												}
											],
											"functionName": {
												"name": "abi_encode_string",
												"nodeType": "YulIdentifier",
												"src": "6979:17:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "6979:46:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "6971:4:13"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "6690:9:13",
									"type": ""
								},
								{
									"name": "value3",
									"nodeType": "YulTypedName",
									"src": "6701:6:13",
									"type": ""
								},
								{
									"name": "value2",
									"nodeType": "YulTypedName",
									"src": "6709:6:13",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "6717:6:13",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "6725:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "6736:4:13",
									"type": ""
								}
							],
							"src": "6542:489:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "7116:169:13",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "7162:16:13",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "7171:1:13",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "7174:1:13",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "7164:6:13"
														},
														"nodeType": "YulFunctionCall",
														"src": "7164:12:13"
													},
													"nodeType": "YulExpressionStatement",
													"src": "7164:12:13"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "7137:7:13"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "7146:9:13"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "7133:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "7133:23:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "7158:2:13",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "7129:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "7129:32:13"
										},
										"nodeType": "YulIf",
										"src": "7126:52:13"
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "7187:29:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "7206:9:13"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "7200:5:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "7200:16:13"
										},
										"variables": [
											{
												"name": "value",
												"nodeType": "YulTypedName",
												"src": "7191:5:13",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "7249:5:13"
												}
											],
											"functionName": {
												"name": "validator_revert_bytes4",
												"nodeType": "YulIdentifier",
												"src": "7225:23:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "7225:30:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "7225:30:13"
									},
									{
										"nodeType": "YulAssignment",
										"src": "7264:15:13",
										"value": {
											"name": "value",
											"nodeType": "YulIdentifier",
											"src": "7274:5:13"
										},
										"variableNames": [
											{
												"name": "value0",
												"nodeType": "YulIdentifier",
												"src": "7264:6:13"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_bytes4_fromMemory",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "7082:9:13",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "7093:7:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "7105:6:13",
									"type": ""
								}
							],
							"src": "7036:249:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "7322:95:13",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "7339:1:13",
													"type": "",
													"value": "0"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "7346:3:13",
															"type": "",
															"value": "224"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "7351:10:13",
															"type": "",
															"value": "0x4e487b71"
														}
													],
													"functionName": {
														"name": "shl",
														"nodeType": "YulIdentifier",
														"src": "7342:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "7342:20:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "7332:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "7332:31:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "7332:31:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "7379:1:13",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "7382:4:13",
													"type": "",
													"value": "0x12"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "7372:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "7372:15:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "7372:15:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "7403:1:13",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "7406:4:13",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "7396:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "7396:15:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "7396:15:13"
									}
								]
							},
							"name": "panic_error_0x12",
							"nodeType": "YulFunctionDefinition",
							"src": "7290:127:13"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "7551:145:13",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "7561:26:13",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "7573:9:13"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "7584:2:13",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "7569:3:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "7569:18:13"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "7561:4:13"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "7603:9:13"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "7618:6:13"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "7634:3:13",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "7639:1:13",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nodeType": "YulIdentifier",
																		"src": "7630:3:13"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "7630:11:13"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "7643:1:13",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "7626:3:13"
															},
															"nodeType": "YulFunctionCall",
															"src": "7626:19:13"
														}
													],
													"functionName": {
														"name": "and",
														"nodeType": "YulIdentifier",
														"src": "7614:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "7614:32:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "7596:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "7596:51:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "7596:51:13"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "7667:9:13"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "7678:2:13",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "7663:3:13"
													},
													"nodeType": "YulFunctionCall",
													"src": "7663:18:13"
												},
												{
													"name": "value1",
													"nodeType": "YulIdentifier",
													"src": "7683:6:13"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "7656:6:13"
											},
											"nodeType": "YulFunctionCall",
											"src": "7656:34:13"
										},
										"nodeType": "YulExpressionStatement",
										"src": "7656:34:13"
									}
								]
							},
							"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "7512:9:13",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "7523:6:13",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "7531:6:13",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "7542:4:13",
									"type": ""
								}
							],
							"src": "7422:274:13"
						}
					]
				},
				"contents": "{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value3 := memPtr\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_uint256_t_bool__to_t_uint256_t_bool__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), iszero(iszero(value1)))\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n}",
				"id": 13,
				"language": "Yul",
				"name": "#utility.yul"
			}
		],
		"immutableReferences": {
			"2948": [
				{
					"length": 32,
					"start": 494
				}
			]
		},
		"linkReferences": {},
		"object": "",
		"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x127 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xA9 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x6E JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x284 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x2AA JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2BD JUMPI DUP1 PUSH4 0xF9931855 EQ PUSH2 0x2D0 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x231 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x239 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x24A JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x252 JUMPI DUP1 PUSH4 0xA693B19F EQ PUSH2 0x265 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1B0 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x676DD563 EQ PUSH2 0x1E9 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x21E JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x12B JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x193 JUMPI DUP1 PUSH4 0x1249C58B EQ PUSH2 0x1A8 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x13E PUSH2 0x139 CALLDATASIZE PUSH1 0x4 PUSH2 0xDE3 JUMP JUMPDEST PUSH2 0x2EF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x15B PUSH2 0x340 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14A SWAP2 SWAP1 PUSH2 0xE4B JUMP JUMPDEST PUSH2 0x17B PUSH2 0x176 CALLDATASIZE PUSH1 0x4 PUSH2 0xE5D JUMP JUMPDEST PUSH2 0x3CF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x14A JUMP JUMPDEST PUSH2 0x1A6 PUSH2 0x1A1 CALLDATASIZE PUSH1 0x4 PUSH2 0xE8F JUMP JUMPDEST PUSH2 0x3F6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A6 PUSH2 0x405 JUMP JUMPDEST PUSH2 0x1A6 PUSH2 0x1BE CALLDATASIZE PUSH1 0x4 PUSH2 0xEB7 JUMP JUMPDEST PUSH2 0x477 JUMP JUMPDEST PUSH2 0x1A6 PUSH2 0x1D1 CALLDATASIZE PUSH1 0x4 PUSH2 0xEB7 JUMP JUMPDEST PUSH2 0x505 JUMP JUMPDEST PUSH2 0x17B PUSH2 0x1E4 CALLDATASIZE PUSH1 0x4 PUSH2 0xE5D JUMP JUMPDEST PUSH2 0x524 JUMP JUMPDEST PUSH2 0x210 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x14A JUMP JUMPDEST PUSH2 0x210 PUSH2 0x22C CALLDATASIZE PUSH1 0x4 PUSH2 0xEF0 JUMP JUMPDEST PUSH2 0x52E JUMP JUMPDEST PUSH2 0x1A6 PUSH2 0x573 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x17B JUMP JUMPDEST PUSH2 0x15B PUSH2 0x586 JUMP JUMPDEST PUSH2 0x1A6 PUSH2 0x260 CALLDATASIZE PUSH1 0x4 PUSH2 0xF09 JUMP JUMPDEST PUSH2 0x595 JUMP JUMPDEST PUSH2 0x210 PUSH2 0x273 CALLDATASIZE PUSH1 0x4 PUSH2 0xEF0 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1A6 PUSH2 0x292 CALLDATASIZE PUSH1 0x4 PUSH2 0xF56 JUMP JUMPDEST PUSH2 0x5A0 JUMP JUMPDEST PUSH2 0x15B PUSH2 0x2A5 CALLDATASIZE PUSH1 0x4 PUSH2 0xE5D JUMP JUMPDEST PUSH2 0x5B7 JUMP JUMPDEST PUSH2 0x13E PUSH2 0x2B8 CALLDATASIZE PUSH1 0x4 PUSH2 0x102B JUMP JUMPDEST PUSH2 0x628 JUMP JUMPDEST PUSH2 0x1A6 PUSH2 0x2CB CALLDATASIZE PUSH1 0x4 PUSH2 0xEF0 JUMP JUMPDEST PUSH2 0x655 JUMP JUMPDEST PUSH2 0x210 PUSH2 0x2DE CALLDATASIZE PUSH1 0x4 PUSH2 0xEF0 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x31F JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x33A JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH0 DUP1 SLOAD PUSH2 0x34E SWAP1 PUSH2 0x105C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x37A SWAP1 PUSH2 0x105C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3C5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x39C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3C5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3A8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x3D9 DUP3 PUSH2 0x692 JUMP JUMPDEST POP PUSH0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x33A JUMP JUMPDEST PUSH2 0x401 DUP3 DUP3 CALLER PUSH2 0x6CA JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD SWAP1 PUSH0 PUSH2 0x414 DUP4 PUSH2 0x1094 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x7 SLOAD PUSH2 0x426 CALLER DUP3 PUSH2 0x6D7 JUMP JUMPDEST CALLER PUSH0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 TIMESTAMP SWAP1 SSTORE DUP2 MLOAD DUP5 DUP2 MSTORE PUSH1 0x1 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x8FA3FF725D2F7190C5E5DD9BC88F241A72B239E127E347DCCDFC28E44E5E0963 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x4A5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x4B1 DUP4 DUP4 CALLER PUSH2 0x6F0 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x4FF JUMPI PUSH1 0x40 MLOAD PUSH4 0x64283D7B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x49C JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x51F DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 DUP2 MSTORE POP PUSH2 0x5A0 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x33A DUP3 PUSH2 0x692 JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x558 JUMPI PUSH1 0x40 MLOAD PUSH4 0x22718AD9 PUSH1 0xE2 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x49C JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x57B PUSH2 0x7E2 JUMP JUMPDEST PUSH2 0x584 PUSH0 PUSH2 0x80F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x34E SWAP1 PUSH2 0x105C JUMP JUMPDEST PUSH2 0x401 CALLER DUP4 DUP4 PUSH2 0x860 JUMP JUMPDEST PUSH2 0x5AB DUP5 DUP5 DUP5 PUSH2 0x477 JUMP JUMPDEST PUSH2 0x4FF DUP5 DUP5 DUP5 DUP5 PUSH2 0x8FE JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5C2 DUP3 PUSH2 0x692 JUMP JUMPDEST POP PUSH0 PUSH2 0x5D8 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 MLOAD GT PUSH2 0x5F6 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 DUP2 MSTORE POP PUSH2 0x621 JUMP JUMPDEST DUP1 PUSH2 0x600 DUP5 PUSH2 0xA24 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x611 SWAP3 SWAP2 SWAP1 PUSH2 0x10B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x65D PUSH2 0x7E2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x686 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x49C JUMP JUMPDEST PUSH2 0x68F DUP2 PUSH2 0x80F JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x33A JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x49C JUMP JUMPDEST PUSH2 0x51F DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0xAB4 JUMP JUMPDEST PUSH2 0x401 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 DUP2 MSTORE POP PUSH2 0xBB8 JUMP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND ISZERO PUSH2 0x71C JUMPI PUSH2 0x71C DUP2 DUP5 DUP7 PUSH2 0xBCE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x756 JUMPI PUSH2 0x737 PUSH0 DUP6 PUSH0 DUP1 PUSH2 0xAB4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH0 NOT ADD SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND ISZERO PUSH2 0x784 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMPDEST PUSH0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP8 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x584 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x49C JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x892 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB611743 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x49C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO PUSH2 0x4FF JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x940 SWAP1 CALLER SWAP1 DUP9 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x10E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x97A JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x977 SWAP2 DUP2 ADD SWAP1 PUSH2 0x1122 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x9E1 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x9A7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x9AC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH0 SUB PUSH2 0x9D9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x49C JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ PUSH2 0xA1D JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x49C JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0xA30 DUP4 PUSH2 0xC32 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA4F JUMPI PUSH2 0xA4F PUSH2 0xF42 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA79 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0xA83 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP1 PUSH2 0xAC8 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0xB89 JUMPI PUSH0 PUSH2 0xAD7 DUP5 PUSH2 0x692 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0xB03 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0xB16 JUMPI POP PUSH2 0xB14 DUP2 DUP5 PUSH2 0x628 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0xB3F JUMPI PUSH1 0x40 MLOAD PUSH4 0xA9FBF51F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x49C JUMP JUMPDEST DUP2 ISZERO PUSH2 0xB87 JUMPI DUP4 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST POP POP PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xBC2 DUP4 DUP4 PUSH2 0xD09 JUMP JUMPDEST PUSH2 0x51F PUSH0 DUP5 DUP5 DUP5 PUSH2 0x8FE JUMP JUMPDEST PUSH2 0xBD9 DUP4 DUP4 DUP4 PUSH2 0xD6A JUMP JUMPDEST PUSH2 0x51F JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xC07 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x49C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x177E802F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x49C JUMP JUMPDEST PUSH0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0xC70 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0xC9C JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0xCBA JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0xCD2 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0xCE6 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0xCF8 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x33A JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xD32 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x49C JUMP JUMPDEST PUSH0 PUSH2 0xD3E DUP4 DUP4 PUSH0 PUSH2 0x6F0 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x51F JUMPI PUSH1 0x40 MLOAD PUSH4 0x39E35637 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x49C JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0xDC6 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0xDA3 JUMPI POP PUSH2 0xDA3 DUP5 DUP5 PUSH2 0x628 JUMP JUMPDEST DUP1 PUSH2 0xDC6 JUMPI POP PUSH0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x68F JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDF3 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x621 DUP2 PUSH2 0xDCE JUMP JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE18 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xE00 JUMP JUMPDEST POP POP PUSH0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xE37 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xDFE JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 PUSH2 0x621 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xE20 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE6D JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xE8A JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xEA0 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xEA9 DUP4 PUSH2 0xE74 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xEC9 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xED2 DUP5 PUSH2 0xE74 JUMP JUMPDEST SWAP3 POP PUSH2 0xEE0 PUSH1 0x20 DUP6 ADD PUSH2 0xE74 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF00 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x621 DUP3 PUSH2 0xE74 JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF1A JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xF23 DUP4 PUSH2 0xE74 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xF37 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xF69 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xF72 DUP6 PUSH2 0xE74 JUMP JUMPDEST SWAP4 POP PUSH2 0xF80 PUSH1 0x20 DUP7 ADD PUSH2 0xE74 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xFA3 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xFB6 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xFC8 JUMPI PUSH2 0xFC8 PUSH2 0xF42 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xFF0 JUMPI PUSH2 0xFF0 PUSH2 0xF42 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x1008 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x103C JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1045 DUP4 PUSH2 0xE74 JUMP JUMPDEST SWAP2 POP PUSH2 0x1053 PUSH1 0x20 DUP5 ADD PUSH2 0xE74 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1070 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x108E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x1 DUP3 ADD PUSH2 0x10B1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH0 DUP4 MLOAD PUSH2 0x10C9 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0xDFE JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x10DD DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0xDFE JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH0 SWAP1 PUSH2 0x1118 SWAP1 DUP4 ADD DUP5 PUSH2 0xE20 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1132 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x621 DUP2 PUSH2 0xDCE JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA6 0x4C 0xBA PUSH12 0x232D169AFBFBB9C78424ACC9 0xBD CALLDATACOPY 0xB4 0xEE 0xA8 DUP9 0x23 PUSH9 0xD78AD1162A5EA47064 PUSH20 0x6F6C634300081400330000000000000000000000 ",
		"sourceMap": "169:823:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1561:300:2;;;;;;:::i;:::-;;:::i;:::-;;;565:14:13;;558:22;540:41;;528:2;513:18;1561:300:2;;;;;;;;2365:89;;;:::i;:::-;;;;;;;:::i;3497:154::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1697:32:13;;;1679:51;;1667:2;1652:18;3497:154:2;1533:203:13;3323:113:2;;;;;;:::i;:::-;;:::i;:::-;;747:243:12;;;:::i;4143:578:2:-;;;;;;:::i;:::-;;:::i;4787:132::-;;;;;;:::i;:::-;;:::i;2185:118::-;;;;;;:::i;:::-;;:::i;240:34:12:-;;;;;;;;2657:25:13;;;2645:2;2630:18;240:34:12;2511:177:13;1920:208:2;;;;;;:::i;:::-;;:::i;2293:101:0:-;;;:::i;1638:85::-;1710:6;;-1:-1:-1;;;;;1710:6:0;1638:85;;2518:93:2;;;:::i;3718:144::-;;;;;;:::i;:::-;;:::i;345:47:12:-;;;;;;:::i;:::-;;;;;;;;;;;;;;4985:208:2;;;;;;:::i;:::-;;:::i;2677:255::-;;;;;;:::i;:::-;;:::i;3928:153::-;;;;;;:::i;:::-;;:::i;2543:215:0:-;;;;;;:::i;:::-;;:::i;292:47:12:-;;;;;;:::i;:::-;;;;;;;;;;;;;;1561:300:2;1663:4;-1:-1:-1;;;;;;1698:40:2;;-1:-1:-1;;;1698:40:2;;:104;;-1:-1:-1;;;;;;;1754:48:2;;-1:-1:-1;;;1754:48:2;1698:104;:156;;;-1:-1:-1;;;;;;;;;;861:40:8;;;1818:36:2;1679:175;1561:300;-1:-1:-1;;1561:300:2:o;2365:89::-;2410:13;2442:5;2435:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2365:89;:::o;3497:154::-;3564:7;3583:22;3597:7;3583:13;:22::i;:::-;-1:-1:-1;6008:7:2;6034:24;;;:15;:24;;;;;;-1:-1:-1;;;;;6034:24:2;3623:21;5938:127;3323:113;3394:35;3403:2;3407:7;735:10:6;3394:8:2;:35::i;:::-;3323:113;;:::o;747:243:12:-;782:9;:11;;;:9;:11;;;:::i;:::-;;;;-1:-1:-1;;824:9:12;;843:33;853:10;824:9;843;:33::i;:::-;900:10;887:24;;;;:12;:24;;;;;;;;;914:15;887:42;;944:39;;5566:25:13;;;978:4:12;5607:18:13;;;5600:50;;;;944:39:12;;5539:18:13;944:39:12;;;;;;;772:218;747:243::o;4143:578:2:-;-1:-1:-1;;;;;4237:16:2;;4233:87;;4276:33;;-1:-1:-1;;;4276:33:2;;4306:1;4276:33;;;1679:51:13;1652:18;;4276:33:2;;;;;;;;4233:87;4538:21;4562:34;4570:2;4574:7;735:10:6;4562:7:2;:34::i;:::-;4538:58;;4627:4;-1:-1:-1;;;;;4610:21:2;:13;-1:-1:-1;;;;;4610:21:2;;4606:109;;4654:50;;-1:-1:-1;;;4654:50:2;;-1:-1:-1;;;;;5919:15:13;;;4654:50:2;;;5901:34:13;5951:18;;;5944:34;;;6014:15;;5994:18;;;5987:43;5836:18;;4654:50:2;5661:375:13;4606:109:2;4223:498;4143:578;;;:::o;4787:132::-;4873:39;4890:4;4896:2;4900:7;4873:39;;;;;;;;;;;;:16;:39::i;:::-;4787:132;;;:::o;2185:118::-;2248:7;2274:22;2288:7;2274:13;:22::i;1920:208::-;1983:7;-1:-1:-1;;;;;2006:19:2;;2002:87;;2048:30;;-1:-1:-1;;;2048:30:2;;2075:1;2048:30;;;1679:51:13;1652:18;;2048:30:2;1533:203:13;2002:87:2;-1:-1:-1;;;;;;2105:16:2;;;;;:9;:16;;;;;;;1920:208::o;2293:101:0:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;2518:93:2:-;2565:13;2597:7;2590:14;;;;;:::i;3718:144::-;3803:52;735:10:6;3836:8:2;3846;3803:18;:52::i;4985:208::-;5098:31;5111:4;5117:2;5121:7;5098:12;:31::i;:::-;5139:47;5162:4;5168:2;5172:7;5181:4;5139:22;:47::i;2677:255::-;2741:13;2766:22;2780:7;2766:13;:22::i;:::-;;2799:21;2823:10;3250:9;;;;;;;;;-1:-1:-1;3250:9:2;;;3174:92;2823:10;2799:34;;2874:1;2856:7;2850:21;:25;:75;;;;;;;;;;;;;;;;;2892:7;2901:18;:7;:16;:18::i;:::-;2878:42;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2850:75;2843:82;2677:255;-1:-1:-1;;;2677:255:2:o;3928:153::-;-1:-1:-1;;;;;4039:25:2;;;4016:4;4039:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;3928:153::o;2543:215:0:-;1531:13;:11;:13::i;:::-;-1:-1:-1;;;;;2627:22:0;::::1;2623:91;;2672:31;::::0;-1:-1:-1;;;2672:31:0;;2700:1:::1;2672:31;::::0;::::1;1679:51:13::0;1652:18;;2672:31:0::1;1533:203:13::0;2623:91:0::1;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;16138:241:2:-;16201:7;5799:16;;;:7;:16;;;;;;-1:-1:-1;;;;;5799:16:2;;16263:88;;16309:31;;-1:-1:-1;;;16309:31:2;;;;;2657:25:13;;;2630:18;;16309:31:2;2511:177:13;14418:120:2;14498:33;14507:2;14511:7;14520:4;14526;14498:8;:33::i;10633:100::-;10700:26;10710:2;10714:7;10700:26;;;;;;;;;;;;:9;:26::i;8838:795::-;8924:7;5799:16;;;:7;:16;;;;;;-1:-1:-1;;;;;5799:16:2;;;;9035:18;;;9031:86;;9069:37;9086:4;9092;9098:7;9069:16;:37::i;:::-;-1:-1:-1;;;;;9161:18:2;;;9157:256;;9277:48;9294:1;9298:7;9315:1;9319:5;9277:8;:48::i;:::-;-1:-1:-1;;;;;9368:15:2;;;;;;:9;:15;;;;;:20;;-1:-1:-1;;9368:20:2;;;9157:256;-1:-1:-1;;;;;9427:16:2;;;9423:107;;-1:-1:-1;;;;;9487:13:2;;;;;;:9;:13;;;;;:18;;9504:1;9487:18;;;9423:107;9540:16;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;9540:21:2;-1:-1:-1;;;;;9540:21:2;;;;;;;;;9577:27;;9540:16;;9577:27;;;;;;;9622:4;8838:795;-1:-1:-1;;;;8838:795:2:o;1796:162:0:-;1710:6;;-1:-1:-1;;;;;1710:6:0;735:10:6;1855:23:0;1851:101;;1901:40;;-1:-1:-1;;;1901:40:0;;735:10:6;1901:40:0;;;1679:51:13;1652:18;;1901:40:0;1533:203:13;2912:187:0;3004:6;;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;;;;;3020:17:0;;;;;;;3052:40;;3004:6;;;3020:17;3004:6;;3052:40;;2985:16;;3052:40;2975:124;2912:187;:::o;15591:312:2:-;-1:-1:-1;;;;;15698:22:2;;15694:91;;15743:31;;-1:-1:-1;;;15743:31:2;;-1:-1:-1;;;;;1697:32:13;;15743:31:2;;;1679:51:13;1652:18;;15743:31:2;1533:203:13;15694:91:2;-1:-1:-1;;;;;15794:25:2;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;15794:46:2;;;;;;;;;;15855:41;;540::13;;;15855::2;;513:18:13;15855:41:2;;;;;;;15591:312;;;:::o;16918:782::-;-1:-1:-1;;;;;17034:14:2;;;:18;17030:664;;17072:71;;-1:-1:-1;;;17072:71:2;;-1:-1:-1;;;;;17072:36:2;;;;;:71;;735:10:6;;17123:4:2;;17129:7;;17138:4;;17072:71;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;17072:71:2;;;;;;;;-1:-1:-1;;17072:71:2;;;;;;;;;;;;:::i;:::-;;;17068:616;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17381:6;:13;17398:1;17381:18;17377:293;;17430:25;;-1:-1:-1;;;17430:25:2;;-1:-1:-1;;;;;1697:32:13;;17430:25:2;;;1679:51:13;1652:18;;17430:25:2;1533:203:13;17377:293:2;17622:6;17616:13;17607:6;17603:2;17599:15;17592:38;17068:616;-1:-1:-1;;;;;;17190:51:2;;-1:-1:-1;;;17190:51:2;17186:130;;17272:25;;-1:-1:-1;;;17272:25:2;;-1:-1:-1;;;;;1697:32:13;;17272:25:2;;;1679:51:13;1652:18;;17272:25:2;1533:203:13;17186:130:2;17144:186;16918:782;;;;:::o;637:698:7:-;693:13;742:14;759:17;770:5;759:10;:17::i;:::-;779:1;759:21;742:38;;794:20;828:6;817:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;817:18:7;-1:-1:-1;794:41:7;-1:-1:-1;955:28:7;;;971:2;955:28;1010:282;-1:-1:-1;;1041:5:7;-1:-1:-1;;;1175:2:7;1164:14;;1159:32;1041:5;1146:46;1236:2;1227:11;;;-1:-1:-1;1256:21:7;1010:282;1256:21;-1:-1:-1;1312:6:7;637:698;-1:-1:-1;;;637:698:7:o;14720:662:2:-;14880:9;:31;;;-1:-1:-1;;;;;;14893:18:2;;;;14880:31;14876:460;;;14927:13;14943:22;14957:7;14943:13;:22::i;:::-;14927:38;-1:-1:-1;;;;;;15093:18:2;;;;;;:35;;;15124:4;-1:-1:-1;;;;;15115:13:2;:5;-1:-1:-1;;;;;15115:13:2;;;15093:35;:69;;;;;15133:29;15150:5;15157:4;15133:16;:29::i;:::-;15132:30;15093:69;15089:142;;;15189:27;;-1:-1:-1;;;15189:27:2;;-1:-1:-1;;;;;1697:32:13;;15189:27:2;;;1679:51:13;1652:18;;15189:27:2;1533:203:13;15089:142:2;15249:9;15245:81;;;15303:7;15299:2;-1:-1:-1;;;;;15283:28:2;15292:5;-1:-1:-1;;;;;15283:28:2;;;;;;;;;;;15245:81;14913:423;14876:460;-1:-1:-1;;15346:24:2;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;15346:29:2;-1:-1:-1;;;;;15346:29:2;;;;;;;;;;14720:662::o;10954:182::-;11048:18;11054:2;11058:7;11048:5;:18::i;:::-;11076:53;11107:1;11111:2;11115:7;11124:4;11076:22;:53::i;7082:368::-;7194:38;7208:5;7215:7;7224;7194:13;:38::i;:::-;7189:255;;-1:-1:-1;;;;;7252:19:2;;7248:186;;7298:31;;-1:-1:-1;;;7298:31:2;;;;;2657:25:13;;;2630:18;;7298:31:2;2511:177:13;7248:186:2;7375:44;;-1:-1:-1;;;7375:44:2;;-1:-1:-1;;;;;7614:32:13;;7375:44:2;;;7596:51:13;7663:18;;;7656:34;;;7569:18;;7375:44:2;7422:274:13;12214:916:10;12267:7;;-1:-1:-1;;;12342:17:10;;12338:103;;-1:-1:-1;;;12379:17:10;;;-1:-1:-1;12424:2:10;12414:12;12338:103;12467:8;12458:5;:17;12454:103;;12504:8;12495:17;;;-1:-1:-1;12540:2:10;12530:12;12454:103;12583:8;12574:5;:17;12570:103;;12620:8;12611:17;;;-1:-1:-1;12656:2:10;12646:12;12570:103;12699:7;12690:5;:16;12686:100;;12735:7;12726:16;;;-1:-1:-1;12770:1:10;12760:11;12686:100;12812:7;12803:5;:16;12799:100;;12848:7;12839:16;;;-1:-1:-1;12883:1:10;12873:11;12799:100;12925:7;12916:5;:16;12912:100;;12961:7;12952:16;;;-1:-1:-1;12996:1:10;12986:11;12912:100;13038:7;13029:5;:16;13025:66;;13075:1;13065:11;13117:6;12214:916;-1:-1:-1;;12214:916:10:o;9955:327:2:-;-1:-1:-1;;;;;10022:16:2;;10018:87;;10061:33;;-1:-1:-1;;;10061:33:2;;10091:1;10061:33;;;1679:51:13;1652:18;;10061:33:2;1533:203:13;10018:87:2;10114:21;10138:32;10146:2;10150:7;10167:1;10138:7;:32::i;:::-;10114:56;-1:-1:-1;;;;;;10184:27:2;;;10180:96;;10234:31;;-1:-1:-1;;;10234:31:2;;10262:1;10234:31;;;1679:51:13;1652:18;;10234:31:2;1533:203:13;6376:272:2;6479:4;-1:-1:-1;;;;;6514:21:2;;;;;;:127;;;6561:7;-1:-1:-1;;;;;6552:16:2;:5;-1:-1:-1;;;;;6552:16:2;;:52;;;;6572:32;6589:5;6596:7;6572:16;:32::i;:::-;6552:88;;;-1:-1:-1;6008:7:2;6034:24;;;:15;:24;;;;;;-1:-1:-1;;;;;6608:32:2;;;6034:24;;6608:32;6552:88;6495:146;6376:272;-1:-1:-1;;;;6376:272:2:o;14:131:13:-;-1:-1:-1;;;;;;88:32:13;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:250::-;677:1;687:113;701:6;698:1;695:13;687:113;;;777:11;;;771:18;758:11;;;751:39;723:2;716:10;687:113;;;-1:-1:-1;;834:1:13;816:16;;809:27;592:250::o;847:271::-;889:3;927:5;921:12;954:6;949:3;942:19;970:76;1039:6;1032:4;1027:3;1023:14;1016:4;1009:5;1005:16;970:76;:::i;:::-;1100:2;1079:15;-1:-1:-1;;1075:29:13;1066:39;;;;1107:4;1062:50;;847:271;-1:-1:-1;;847:271:13:o;1123:220::-;1272:2;1261:9;1254:21;1235:4;1292:45;1333:2;1322:9;1318:18;1310:6;1292:45;:::i;1348:180::-;1407:6;1460:2;1448:9;1439:7;1435:23;1431:32;1428:52;;;1476:1;1473;1466:12;1428:52;-1:-1:-1;1499:23:13;;1348:180;-1:-1:-1;1348:180:13:o;1741:173::-;1809:20;;-1:-1:-1;;;;;1858:31:13;;1848:42;;1838:70;;1904:1;1901;1894:12;1838:70;1741:173;;;:::o;1919:254::-;1987:6;1995;2048:2;2036:9;2027:7;2023:23;2019:32;2016:52;;;2064:1;2061;2054:12;2016:52;2087:29;2106:9;2087:29;:::i;:::-;2077:39;2163:2;2148:18;;;;2135:32;;-1:-1:-1;;;1919:254:13:o;2178:328::-;2255:6;2263;2271;2324:2;2312:9;2303:7;2299:23;2295:32;2292:52;;;2340:1;2337;2330:12;2292:52;2363:29;2382:9;2363:29;:::i;:::-;2353:39;;2411:38;2445:2;2434:9;2430:18;2411:38;:::i;:::-;2401:48;;2496:2;2485:9;2481:18;2468:32;2458:42;;2178:328;;;;;:::o;2693:186::-;2752:6;2805:2;2793:9;2784:7;2780:23;2776:32;2773:52;;;2821:1;2818;2811:12;2773:52;2844:29;2863:9;2844:29;:::i;2884:347::-;2949:6;2957;3010:2;2998:9;2989:7;2985:23;2981:32;2978:52;;;3026:1;3023;3016:12;2978:52;3049:29;3068:9;3049:29;:::i;:::-;3039:39;;3128:2;3117:9;3113:18;3100:32;3175:5;3168:13;3161:21;3154:5;3151:32;3141:60;;3197:1;3194;3187:12;3141:60;3220:5;3210:15;;;2884:347;;;;;:::o;3236:127::-;3297:10;3292:3;3288:20;3285:1;3278:31;3328:4;3325:1;3318:15;3352:4;3349:1;3342:15;3368:1138;3463:6;3471;3479;3487;3540:3;3528:9;3519:7;3515:23;3511:33;3508:53;;;3557:1;3554;3547:12;3508:53;3580:29;3599:9;3580:29;:::i;:::-;3570:39;;3628:38;3662:2;3651:9;3647:18;3628:38;:::i;:::-;3618:48;;3713:2;3702:9;3698:18;3685:32;3675:42;;3768:2;3757:9;3753:18;3740:32;3791:18;3832:2;3824:6;3821:14;3818:34;;;3848:1;3845;3838:12;3818:34;3886:6;3875:9;3871:22;3861:32;;3931:7;3924:4;3920:2;3916:13;3912:27;3902:55;;3953:1;3950;3943:12;3902:55;3989:2;3976:16;4011:2;4007;4004:10;4001:36;;;4017:18;;:::i;:::-;4092:2;4086:9;4060:2;4146:13;;-1:-1:-1;;4142:22:13;;;4166:2;4138:31;4134:40;4122:53;;;4190:18;;;4210:22;;;4187:46;4184:72;;;4236:18;;:::i;:::-;4276:10;4272:2;4265:22;4311:2;4303:6;4296:18;4351:7;4346:2;4341;4337;4333:11;4329:20;4326:33;4323:53;;;4372:1;4369;4362:12;4323:53;4428:2;4423;4419;4415:11;4410:2;4402:6;4398:15;4385:46;4473:1;4468:2;4463;4455:6;4451:15;4447:24;4440:35;4494:6;4484:16;;;;;;;3368:1138;;;;;;;:::o;4511:260::-;4579:6;4587;4640:2;4628:9;4619:7;4615:23;4611:32;4608:52;;;4656:1;4653;4646:12;4608:52;4679:29;4698:9;4679:29;:::i;:::-;4669:39;;4727:38;4761:2;4750:9;4746:18;4727:38;:::i;:::-;4717:48;;4511:260;;;;;:::o;4776:380::-;4855:1;4851:12;;;;4898;;;4919:61;;4973:4;4965:6;4961:17;4951:27;;4919:61;5026:2;5018:6;5015:14;4995:18;4992:38;4989:161;;5072:10;5067:3;5063:20;5060:1;5053:31;5107:4;5104:1;5097:15;5135:4;5132:1;5125:15;4989:161;;4776:380;;;:::o;5161:232::-;5200:3;5221:17;;;5218:140;;5280:10;5275:3;5271:20;5268:1;5261:31;5315:4;5312:1;5305:15;5343:4;5340:1;5333:15;5218:140;-1:-1:-1;5385:1:13;5374:13;;5161:232::o;6041:496::-;6220:3;6258:6;6252:13;6274:66;6333:6;6328:3;6321:4;6313:6;6309:17;6274:66;:::i;:::-;6403:13;;6362:16;;;;6425:70;6403:13;6362:16;6472:4;6460:17;;6425:70;:::i;:::-;6511:20;;6041:496;-1:-1:-1;;;;6041:496:13:o;6542:489::-;-1:-1:-1;;;;;6811:15:13;;;6793:34;;6863:15;;6858:2;6843:18;;6836:43;6910:2;6895:18;;6888:34;;;6958:3;6953:2;6938:18;;6931:31;;;6736:4;;6979:46;;7005:19;;6997:6;6979:46;:::i;:::-;6971:54;6542:489;-1:-1:-1;;;;;;6542:489:13:o;7036:249::-;7105:6;7158:2;7146:9;7137:7;7133:23;7129:32;7126:52;;;7174:1;7171;7164:12;7126:52;7206:9;7200:16;7225:30;7249:5;7225:30;:::i"
	},
	"Assembly": ".code\n  PUSH A0\t\t\tcontract Quest is ERC721, Owna...\n  PUSH 40\t\t\tcontract Quest is ERC721, Owna...\n  MSTORE \t\t\tcontract Quest is ERC721, Owna...\n  CALLVALUE \t\t\tconstructor(\\n        uint256 ...\n  DUP1 \t\t\tconstructor(\\n        uint256 ...\n  ISZERO \t\t\tconstructor(\\n        uint256 ...\n  PUSH [tag] 1\t\t\tconstructor(\\n        uint256 ...\n  JUMPI \t\t\tconstructor(\\n        uint256 ...\n  PUSH 0\t\t\tconstructor(\\n        uint256 ...\n  DUP1 \t\t\tconstructor(\\n        uint256 ...\n  REVERT \t\t\tconstructor(\\n        uint256 ...\ntag 1\t\t\tconstructor(\\n        uint256 ...\n  JUMPDEST \t\t\tconstructor(\\n        uint256 ...\n  POP \t\t\tconstructor(\\n        uint256 ...\n  PUSH 40\t\t\tconstructor(\\n        uint256 ...\n  MLOAD \t\t\tconstructor(\\n        uint256 ...\n  PUSHSIZE \t\t\tconstructor(\\n        uint256 ...\n  CODESIZE \t\t\tconstructor(\\n        uint256 ...\n  SUB \t\t\tconstructor(\\n        uint256 ...\n  DUP1 \t\t\tconstructor(\\n        uint256 ...\n  PUSHSIZE \t\t\tconstructor(\\n        uint256 ...\n  DUP4 \t\t\tconstructor(\\n        uint256 ...\n  CODECOPY \t\t\tconstructor(\\n        uint256 ...\n  DUP2 \t\t\tconstructor(\\n        uint256 ...\n  ADD \t\t\tconstructor(\\n        uint256 ...\n  PUSH 40\t\t\tconstructor(\\n        uint256 ...\n  DUP2 \t\t\tconstructor(\\n        uint256 ...\n  SWAP1 \t\t\tconstructor(\\n        uint256 ...\n  MSTORE \t\t\tconstructor(\\n        uint256 ...\n  PUSH [tag] 2\t\t\tconstructor(\\n        uint256 ...\n  SWAP2 \t\t\tconstructor(\\n        uint256 ...\n  PUSH [tag] 3\t\t\tconstructor(\\n        uint256 ...\n  JUMP \t\t\tconstructor(\\n        uint256 ...\ntag 2\t\t\tconstructor(\\n        uint256 ...\n  JUMPDEST \t\t\tconstructor(\\n        uint256 ...\n  DUP1 \t\t\tinitialOwner\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  PUSH 40\t\t\t\n  ADD \t\t\t\n  PUSH 40\t\t\t\n  MSTORE \t\t\t\n  DUP1 \t\t\t\n  PUSH 8\t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  ADD \t\t\t\n  PUSH 145D595CDD139195\t\t\t\n  PUSH C2\t\t\t\n  SHL \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  PUSH 40\t\t\t\n  ADD \t\t\t\n  PUSH 40\t\t\t\n  MSTORE \t\t\t\n  DUP1 \t\t\t\n  PUSH 4\t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  ADD \t\t\t\n  PUSH 14539195\t\t\t\n  PUSH E2\t\t\t\n  SHL \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  DUP2 \t\t\t\n  PUSH 0\t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 8\t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  PUSH [tag] 9\t\t\t\n  JUMP \t\t\t\ntag 8\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  PUSH 1\t\t\t\n  PUSH [tag] 10\t\t\t\n  DUP3 \t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 9\t\t\t\n  JUMP \t\t\t\ntag 10\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP2 \t\t\t\n  AND \t\t\t\n  PUSH [tag] 12\t\t\t\n  JUMPI \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  PUSH 1E4FBDF7\t\t\t\n  PUSH E0\t\t\t\n  SHL \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 0\t\t\t\n  PUSH 4\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  PUSH 24\t\t\t\n  ADD \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  SWAP2 \t\t\t\n  SUB \t\t\t\n  SWAP1 \t\t\t\n  REVERT \t\t\t\ntag 12\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 15\t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 16\t\t\t\n  JUMP \t\t\t\ntag 15\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  PUSH 80\t\t\tNFT_PRICE = price\n  MSTORE \t\t\tNFT_PRICE = price\n  PUSH [tag] 25\t\t\tcontract Quest is ERC721, Owna...\n  JUMP \t\t\tcontract Quest is ERC721, Owna...\ntag 16\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 6\t\t\t\n  DUP1 \t\t\t\n  SLOAD \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP4 \t\t\t\n  DUP2 \t\t\t\n  AND \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  NOT \t\t\t\n  DUP4 \t\t\t\n  AND \t\t\t\n  DUP2 \t\t\t\n  OR \t\t\t\n  SWAP1 \t\t\t\n  SWAP4 \t\t\t\n  SSTORE \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  SWAP2 \t\t\t\n  AND \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  DUP3 \t\t\t\n  SWAP1 \t\t\t\n  PUSH 8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0\t\t\t\n  SWAP1 \t\t\t\n  PUSH 0\t\t\t\n  SWAP1 \t\t\t\n  LOG3 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 3\t\t\te-Identifier: MIT\\npragma soli...\n  JUMPDEST \t\t\te-Identifier: MIT\\npragma soli...\n  PUSH 0\t\t\tn/ERC7\n  DUP1 \t\t\t/ERC72\n  PUSH 40\t\t\tOw\n  DUP4 \t\t\tacts/acce\n  DUP6 \t\t\tlin/con\n  SUB \t\t\teppelin/contracts/acces\n  SLT \t\t\tpenzeppelin/contracts/access/O...\n  ISZERO \t\t\t\"@openzeppelin/contracts/acces...\n  PUSH [tag] 27\t\t\t\"@openzeppelin/contracts/acces...\n  JUMPI \t\t\t\"@openzeppelin/contracts/acces...\n  PUSH 0\t\t\to\n  DUP1 \t\t\t\\n\n  REVERT \t\t\te.sol\";\\n\\ncon\ntag 27\t\t\t\"@openzeppelin/contracts/acces...\n  JUMPDEST \t\t\t\"@openzeppelin/contracts/acces...\n  DUP3 \t\t\t, Ownable {\\n    \n  MLOAD \t\t\t, Ownable {\\n    \n  PUSH 20\t\t\tic\n  DUP5 \t\t\t   uint256 public \n  ADD \t\t\t   uint256 public \n  MLOAD \t\t\tIds;\\n    uint256 public i\n  SWAP1 \t\t\t, Ownable {\\n    \n  SWAP3 \t\t\t, Ownable {\\n    \n  POP \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH A0\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP2 \t\t\tH\\n\\n    mapping(address => ui...\n  AND \t\t\tH\\n\\n    mapping(address => ui...\n  DUP2 \t\t\t // .10 ETH\\n\\n    mapping(add...\n  EQ \t\t\t // .10 ETH\\n\\n    mapping(add...\n  PUSH [tag] 28\t\t\tNFT_PRICE; // .10 ETH\\n\\n    m...\n  JUMPI \t\t\tNFT_PRICE; // .10 ETH\\n\\n    m...\n  PUSH 0\t\t\te\n  DUP1 \t\t\tt\n  REVERT \t\t\tublic staked\ntag 28\t\t\tNFT_PRICE; // .10 ETH\\n\\n    m...\n  JUMPDEST \t\t\tNFT_PRICE; // .10 ETH\\n\\n    m...\n  DUP1 \t\t\tddres\n  SWAP2 \t\t\t mapping(addres\n  POP \t\t\t mapping(addres\n  POP \t\t\t mapping(addres\n  SWAP3 \t\t\te-Identifier: MIT\\npragma soli...\n  POP \t\t\te-Identifier: MIT\\npragma soli...\n  SWAP3 \t\t\te-Identifier: MIT\\npragma soli...\n  SWAP1 \t\t\te-Identifier: MIT\\npragma soli...\n  POP \t\t\te-Identifier: MIT\\npragma soli...\n  JUMP \t\t\te-Identifier: MIT\\npragma soli...\ntag 20\t\t\t6) public lastFreeMint;\\n\\n   ...\n  JUMPDEST \t\t\t6) public lastFreeMint;\\n\\n   ...\n  PUSH 4E487B71\t\t\tr, uint256\n  PUSH E0\t\t\td u\n  SHL \t\t\tdexed user, uint256 \n  PUSH 0\t\t\t \n  MSTORE \t\t\taddress indexed user, uint256 ...\n  PUSH 41\t\t\tnsta\n  PUSH 4\t\t\tt\n  MSTORE \t\t\t   event Unstak\n  PUSH 24\t\t\tuser\n  PUSH 0\t\t\te\n  REVERT \t\t\ts indexed user,\ntag 21\t\t\tount);\\n    event NFTMinted(ad...\n  JUMPDEST \t\t\tount);\\n    event NFTMinted(ad...\n  PUSH 1\t\t\t\\n\n  DUP2 \t\t\tee);\\n\\n    co\n  DUP2 \t\t\tee);\\n\\n    co\n  SHR \t\t\tee);\\n\\n    co\n  SWAP1 \t\t\tee);\\n\\n    co\n  DUP3 \t\t\t       addre\n  AND \t\t\t       addre\n  DUP1 \t\t\t       addre\n  PUSH [tag] 31\t\t\tlOwner\\n    ) ERC721(\"QuestNFT...\n  JUMPI \t\t\tlOwner\\n    ) ERC721(\"QuestNFT...\n  PUSH 7F\t\t\tlOwn\n  DUP3 \t\t\te(init\n  AND \t\t\tnable(initialOwne\n  SWAP2 \t\t\t\"QNFT\") Ownable(initialOwne\n  POP \t\t\t\"QNFT\") Ownable(initialOwne\ntag 31\t\t\tlOwner\\n    ) ERC721(\"QuestNFT...\n  JUMPDEST \t\t\tlOwner\\n    ) ERC721(\"QuestNFT...\n  PUSH 20\t\t\tio\n  DUP3 \t\t\t   fun\n  LT \t\t\t\\n\\n    function\n  DUP2 \t\t\tPRICE = price;\\n   \n  SUB \t\t\tFT_PRICE = price;\\n    }\\n\\n  ...\n  PUSH [tag] 32\t\t\t  NFT_PRICE = price;\\n    }\\n\\...\n  JUMPI \t\t\t  NFT_PRICE = price;\\n    }\\n\\...\n  PUSH 4E487B71\t\t\t     uint2\n  PUSH E0\t\t\t;\\n \n  SHL \t\t\tds++;\\n        uint25\n  PUSH 0\t\t\te\n  MSTORE \t\t\t   _tokenIds++;\\n        uint2...\n  PUSH 22\t\t\t;\\n  \n  PUSH 4\t\t\tI\n  MSTORE \t\t\t _tokenIds;\\n   \n  PUSH 24\t\t\ter, \n  PUSH 0\t\t\te\n  REVERT \t\t\tt(msg.sender, n\ntag 32\t\t\t  NFT_PRICE = price;\\n    }\\n\\...\n  JUMPDEST \t\t\t  NFT_PRICE = price;\\n    }\\n\\...\n  POP \t\t\t  NFT_PRICE = price;\\n    }\\n\\...\n  SWAP2 \t\t\tount);\\n    event NFTMinted(ad...\n  SWAP1 \t\t\tount);\\n    event NFTMinted(ad...\n  POP \t\t\tount);\\n    event NFTMinted(ad...\n  JUMP \t\t\tount);\\n    event NFTMinted(ad...\ntag 23\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1F\t\t\t\n  DUP3 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 35\t\t\t\n  JUMPI \t\t\t\n  PUSH 0\t\t\t\n  DUP2 \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  DUP2 \t\t\t\n  KECCAK256 \t\t\t\n  PUSH 1F\t\t\t\n  DUP6 \t\t\t\n  ADD \t\t\t\n  PUSH 5\t\t\t\n  SHR \t\t\t\n  DUP2 \t\t\t\n  ADD \t\t\t\n  PUSH 20\t\t\t\n  DUP7 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 36\t\t\t\n  JUMPI \t\t\t\n  POP \t\t\t\n  DUP1 \t\t\t\ntag 36\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1F\t\t\t\n  DUP6 \t\t\t\n  ADD \t\t\t\n  PUSH 5\t\t\t\n  SHR \t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\ntag 37\t\t\t\n  JUMPDEST \t\t\t\n  DUP2 \t\t\t\n  DUP2 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 39\t\t\t\n  JUMPI \t\t\t\n  DUP3 \t\t\t\n  DUP2 \t\t\t\n  SSTORE \t\t\t\n  PUSH 1\t\t\t\n  ADD \t\t\t\n  PUSH [tag] 37\t\t\t\n  JUMP \t\t\t\ntag 39\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\ntag 35\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 9\t\t\t\n  JUMPDEST \t\t\t\n  DUP2 \t\t\t\n  MLOAD \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH 40\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  DUP2 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 43\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 43\t\t\t\n  PUSH [tag] 20\t\t\t\n  JUMP \t\t\t\ntag 43\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 44\t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 45\t\t\t\n  DUP5 \t\t\t\n  SLOAD \t\t\t\n  PUSH [tag] 21\t\t\t\n  JUMP \t\t\t\ntag 45\t\t\t\n  JUMPDEST \t\t\t\n  DUP5 \t\t\t\n  PUSH [tag] 23\t\t\t\n  JUMP \t\t\t\ntag 44\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 20\t\t\t\n  DUP1 \t\t\t\n  PUSH 1F\t\t\t\n  DUP4 \t\t\t\n  GT \t\t\t\n  PUSH 1\t\t\t\n  DUP2 \t\t\t\n  EQ \t\t\t\n  PUSH [tag] 47\t\t\t\n  JUMPI \t\t\t\n  PUSH 0\t\t\t\n  DUP5 \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 48\t\t\t\n  JUMPI \t\t\t\n  POP \t\t\t\n  DUP6 \t\t\t\n  DUP4 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\ntag 48\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  NOT \t\t\t\n  PUSH 3\t\t\t\n  DUP7 \t\t\t\n  SWAP1 \t\t\t\n  SHL \t\t\t\n  SHR \t\t\t\n  NOT \t\t\t\n  AND \t\t\t\n  PUSH 1\t\t\t\n  DUP6 \t\t\t\n  SWAP1 \t\t\t\n  SHL \t\t\t\n  OR \t\t\t\n  DUP6 \t\t\t\n  SSTORE \t\t\t\n  PUSH [tag] 39\t\t\t\n  JUMP \t\t\t\ntag 47\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\tn\n  DUP6 \t\t\t(msg.sender, n\n  DUP2 \t\t\t(msg.sender, n\n  MSTORE \t\t\t(msg.sender, n\n  PUSH 20\t\t\t\n  DUP2 \t\t\t\\n    }\\n}\n  KECCAK256 \t\t\t\\n    }\\n}\n  PUSH 1F\t\t\t\n  NOT \t\t\t\n  DUP7 \t\t\t\n  AND \t\t\t\n  SWAP2 \t\t\t\ntag 51\t\t\t\n  JUMPDEST \t\t\t\n  DUP3 \t\t\t\n  DUP2 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 53\t\t\t\n  JUMPI \t\t\t\n  DUP9 \t\t\t\n  DUP7 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\n  DUP3 \t\t\t\n  SSTORE \t\t\t\n  SWAP5 \t\t\t\n  DUP5 \t\t\t\n  ADD \t\t\t\n  SWAP5 \t\t\t\n  PUSH 1\t\t\t\n  SWAP1 \t\t\t\n  SWAP2 \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  DUP5 \t\t\t\n  ADD \t\t\t\n  PUSH [tag] 51\t\t\t\n  JUMP \t\t\t\ntag 53\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  DUP6 \t\t\t\n  DUP3 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 54\t\t\t\n  JUMPI \t\t\t\n  DUP8 \t\t\t\n  DUP6 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\n  PUSH 0\t\t\t\n  NOT \t\t\t\n  PUSH 3\t\t\t\n  DUP9 \t\t\t\n  SWAP1 \t\t\t\n  SHL \t\t\t\n  PUSH F8\t\t\t\n  AND \t\t\t\n  SHR \t\t\t\n  NOT \t\t\t\n  AND \t\t\t\n  DUP2 \t\t\t\n  SSTORE \t\t\t\ntag 54\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  PUSH 1\t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  SHL \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  SSTORE \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 25\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 80\t\t\tcontract Quest is ERC721, Owna...\n  MLOAD \t\t\tcontract Quest is ERC721, Owna...\n  PUSH #[$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract Quest is ERC721, Owna...\n  PUSH [$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract Quest is ERC721, Owna...\n  PUSH 0\t\t\tcontract Quest is ERC721, Owna...\n  CODECOPY \t\t\tcontract Quest is ERC721, Owna...\n  PUSH 0\t\t\tcontract Quest is ERC721, Owna...\n  ASSIGNIMMUTABLE 2948\t\t\tcontract Quest is ERC721, Owna...\n  PUSH #[$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract Quest is ERC721, Owna...\n  PUSH 0\t\t\tcontract Quest is ERC721, Owna...\n  RETURN \t\t\tcontract Quest is ERC721, Owna...\n.data\n  0:\n    .code\n      PUSH 80\t\t\tcontract Quest is ERC721, Owna...\n      PUSH 40\t\t\tcontract Quest is ERC721, Owna...\n      MSTORE \t\t\tcontract Quest is ERC721, Owna...\n      CALLVALUE \t\t\tcontract Quest is ERC721, Owna...\n      DUP1 \t\t\tcontract Quest is ERC721, Owna...\n      ISZERO \t\t\tcontract Quest is ERC721, Owna...\n      PUSH [tag] 1\t\t\tcontract Quest is ERC721, Owna...\n      JUMPI \t\t\tcontract Quest is ERC721, Owna...\n      PUSH 0\t\t\tcontract Quest is ERC721, Owna...\n      DUP1 \t\t\tcontract Quest is ERC721, Owna...\n      REVERT \t\t\tcontract Quest is ERC721, Owna...\n    tag 1\t\t\tcontract Quest is ERC721, Owna...\n      JUMPDEST \t\t\tcontract Quest is ERC721, Owna...\n      POP \t\t\tcontract Quest is ERC721, Owna...\n      PUSH 4\t\t\tcontract Quest is ERC721, Owna...\n      CALLDATASIZE \t\t\tcontract Quest is ERC721, Owna...\n      LT \t\t\tcontract Quest is ERC721, Owna...\n      PUSH [tag] 2\t\t\tcontract Quest is ERC721, Owna...\n      JUMPI \t\t\tcontract Quest is ERC721, Owna...\n      PUSH 0\t\t\tcontract Quest is ERC721, Owna...\n      CALLDATALOAD \t\t\tcontract Quest is ERC721, Owna...\n      PUSH E0\t\t\tcontract Quest is ERC721, Owna...\n      SHR \t\t\tcontract Quest is ERC721, Owna...\n      DUP1 \t\t\tcontract Quest is ERC721, Owna...\n      PUSH 715018A6\t\t\tcontract Quest is ERC721, Owna...\n      GT \t\t\tcontract Quest is ERC721, Owna...\n      PUSH [tag] 23\t\t\tcontract Quest is ERC721, Owna...\n      JUMPI \t\t\tcontract Quest is ERC721, Owna...\n      DUP1 \t\t\tcontract Quest is ERC721, Owna...\n      PUSH B88D4FDE\t\t\tcontract Quest is ERC721, Owna...\n      GT \t\t\tcontract Quest is ERC721, Owna...\n      PUSH [tag] 24\t\t\tcontract Quest is ERC721, Owna...\n      JUMPI \t\t\tcontract Quest is ERC721, Owna...\n      DUP1 \t\t\tcontract Quest is ERC721, Owna...\n      PUSH B88D4FDE\t\t\tcontract Quest is ERC721, Owna...\n      EQ \t\t\tcontract Quest is ERC721, Owna...\n      PUSH [tag] 18\t\t\tcontract Quest is ERC721, Owna...\n      JUMPI \t\t\tcontract Quest is ERC721, Owna...\n      DUP1 \t\t\tcontract Quest is ERC721, Owna...\n      PUSH C87B56DD\t\t\tcontract Quest is ERC721, Owna...\n      EQ \t\t\tcontract Quest is ERC721, Owna...\n      PUSH [tag] 19\t\t\tcontract Quest is ERC721, Owna...\n      JUMPI \t\t\tcontract Quest is ERC721, Owna...\n      DUP1 \t\t\tcontract Quest is ERC721, Owna...\n      PUSH E985E9C5\t\t\tcontract Quest is ERC721, Owna...\n      EQ \t\t\tcontract Quest is ERC721, Owna...\n      PUSH [tag] 20\t\t\tcontract Quest is ERC721, Owna...\n      JUMPI \t\t\tcontract Quest is ERC721, Owna...\n      DUP1 \t\t\tcontract Quest is ERC721, Owna...\n      PUSH F2FDE38B\t\t\tcontract Quest is ERC721, Owna...\n      EQ \t\t\tcontract Quest is ERC721, Owna...\n      PUSH [tag] 21\t\t\tcontract Quest is ERC721, Owna...\n      JUMPI \t\t\tcontract Quest is ERC721, Owna...\n      DUP1 \t\t\tcontract Quest is ERC721, Owna...\n      PUSH F9931855\t\t\tcontract Quest is ERC721, Owna...\n      EQ \t\t\tcontract Quest is ERC721, Owna...\n      PUSH [tag] 22\t\t\tcontract Quest is ERC721, Owna...\n      JUMPI \t\t\tcontract Quest is ERC721, Owna...\n      PUSH 0\t\t\tcontract Quest is ERC721, Owna...\n      DUP1 \t\t\tcontract Quest is ERC721, Owna...\n      REVERT \t\t\tcontract Quest is ERC721, Owna...\n    tag 24\t\t\tcontract Quest is ERC721, Owna...\n      JUMPDEST \t\t\tcontract Quest is ERC721, Owna...\n      DUP1 \t\t\tcontract Quest is ERC721, Owna...\n      PUSH 715018A6\t\t\tcontract Quest is ERC721, Owna...\n      EQ \t\t\tcontract Quest is ERC721, Owna...\n      PUSH [tag] 13\t\t\tcontract Quest is ERC721, Owna...\n      JUMPI \t\t\tcontract Quest is ERC721, Owna...\n      DUP1 \t\t\tcontract Quest is ERC721, Owna...\n      PUSH 8DA5CB5B\t\t\tcontract Quest is ERC721, Owna...\n      EQ \t\t\tcontract Quest is ERC721, Owna...\n      PUSH [tag] 14\t\t\tcontract Quest is ERC721, Owna...\n      JUMPI \t\t\tcontract Quest is ERC721, Owna...\n      DUP1 \t\t\tcontract Quest is ERC721, Owna...\n      PUSH 95D89B41\t\t\tcontract Quest is ERC721, Owna...\n      EQ \t\t\tcontract Quest is ERC721, Owna...\n      PUSH [tag] 15\t\t\tcontract Quest is ERC721, Owna...\n      JUMPI \t\t\tcontract Quest is ERC721, Owna...\n      DUP1 \t\t\tcontract Quest is ERC721, Owna...\n      PUSH A22CB465\t\t\tcontract Quest is ERC721, Owna...\n      EQ \t\t\tcontract Quest is ERC721, Owna...\n      PUSH [tag] 16\t\t\tcontract Quest is ERC721, Owna...\n      JUMPI \t\t\tcontract Quest is ERC721, Owna...\n      DUP1 \t\t\tcontract Quest is ERC721, Owna...\n      PUSH A693B19F\t\t\tcontract Quest is ERC721, Owna...\n      EQ \t\t\tcontract Quest is ERC721, Owna...\n      PUSH [tag] 17\t\t\tcontract Quest is ERC721, Owna...\n      JUMPI \t\t\tcontract Quest is ERC721, Owna...\n      PUSH 0\t\t\tcontract Quest is ERC721, Owna...\n      DUP1 \t\t\tcontract Quest is ERC721, Owna...\n      REVERT \t\t\tcontract Quest is ERC721, Owna...\n    tag 23\t\t\tcontract Quest is ERC721, Owna...\n      JUMPDEST \t\t\tcontract Quest is ERC721, Owna...\n      DUP1 \t\t\tcontract Quest is ERC721, Owna...\n      PUSH 23B872DD\t\t\tcontract Quest is ERC721, Owna...\n      GT \t\t\tcontract Quest is ERC721, Owna...\n      PUSH [tag] 25\t\t\tcontract Quest is ERC721, Owna...\n      JUMPI \t\t\tcontract Quest is ERC721, Owna...\n      DUP1 \t\t\tcontract Quest is ERC721, Owna...\n      PUSH 23B872DD\t\t\tcontract Quest is ERC721, Owna...\n      EQ \t\t\tcontract Quest is ERC721, Owna...\n      PUSH [tag] 8\t\t\tcontract Quest is ERC721, Owna...\n      JUMPI \t\t\tcontract Quest is ERC721, Owna...\n      DUP1 \t\t\tcontract Quest is ERC721, Owna...\n      PUSH 42842E0E\t\t\tcontract Quest is ERC721, Owna...\n      EQ \t\t\tcontract Quest is ERC721, Owna...\n      PUSH [tag] 9\t\t\tcontract Quest is ERC721, Owna...\n      JUMPI \t\t\tcontract Quest is ERC721, Owna...\n      DUP1 \t\t\tcontract Quest is ERC721, Owna...\n      PUSH 6352211E\t\t\tcontract Quest is ERC721, Owna...\n      EQ \t\t\tcontract Quest is ERC721, Owna...\n      PUSH [tag] 10\t\t\tcontract Quest is ERC721, Owna...\n      JUMPI \t\t\tcontract Quest is ERC721, Owna...\n      DUP1 \t\t\tcontract Quest is ERC721, Owna...\n      PUSH 676DD563\t\t\tcontract Quest is ERC721, Owna...\n      EQ \t\t\tcontract Quest is ERC721, Owna...\n      PUSH [tag] 11\t\t\tcontract Quest is ERC721, Owna...\n      JUMPI \t\t\tcontract Quest is ERC721, Owna...\n      DUP1 \t\t\tcontract Quest is ERC721, Owna...\n      PUSH 70A08231\t\t\tcontract Quest is ERC721, Owna...\n      EQ \t\t\tcontract Quest is ERC721, Owna...\n      PUSH [tag] 12\t\t\tcontract Quest is ERC721, Owna...\n      JUMPI \t\t\tcontract Quest is ERC721, Owna...\n      PUSH 0\t\t\tcontract Quest is ERC721, Owna...\n      DUP1 \t\t\tcontract Quest is ERC721, Owna...\n      REVERT \t\t\tcontract Quest is ERC721, Owna...\n    tag 25\t\t\tcontract Quest is ERC721, Owna...\n      JUMPDEST \t\t\tcontract Quest is ERC721, Owna...\n      DUP1 \t\t\tcontract Quest is ERC721, Owna...\n      PUSH 1FFC9A7\t\t\tcontract Quest is ERC721, Owna...\n      EQ \t\t\tcontract Quest is ERC721, Owna...\n      PUSH [tag] 3\t\t\tcontract Quest is ERC721, Owna...\n      JUMPI \t\t\tcontract Quest is ERC721, Owna...\n      DUP1 \t\t\tcontract Quest is ERC721, Owna...\n      PUSH 6FDDE03\t\t\tcontract Quest is ERC721, Owna...\n      EQ \t\t\tcontract Quest is ERC721, Owna...\n      PUSH [tag] 4\t\t\tcontract Quest is ERC721, Owna...\n      JUMPI \t\t\tcontract Quest is ERC721, Owna...\n      DUP1 \t\t\tcontract Quest is ERC721, Owna...\n      PUSH 81812FC\t\t\tcontract Quest is ERC721, Owna...\n      EQ \t\t\tcontract Quest is ERC721, Owna...\n      PUSH [tag] 5\t\t\tcontract Quest is ERC721, Owna...\n      JUMPI \t\t\tcontract Quest is ERC721, Owna...\n      DUP1 \t\t\tcontract Quest is ERC721, Owna...\n      PUSH 95EA7B3\t\t\tcontract Quest is ERC721, Owna...\n      EQ \t\t\tcontract Quest is ERC721, Owna...\n      PUSH [tag] 6\t\t\tcontract Quest is ERC721, Owna...\n      JUMPI \t\t\tcontract Quest is ERC721, Owna...\n      DUP1 \t\t\tcontract Quest is ERC721, Owna...\n      PUSH 1249C58B\t\t\tcontract Quest is ERC721, Owna...\n      EQ \t\t\tcontract Quest is ERC721, Owna...\n      PUSH [tag] 7\t\t\tcontract Quest is ERC721, Owna...\n      JUMPI \t\t\tcontract Quest is ERC721, Owna...\n    tag 2\t\t\tcontract Quest is ERC721, Owna...\n      JUMPDEST \t\t\tcontract Quest is ERC721, Owna...\n      PUSH 0\t\t\tcontract Quest is ERC721, Owna...\n      DUP1 \t\t\tcontract Quest is ERC721, Owna...\n      REVERT \t\t\tcontract Quest is ERC721, Owna...\n    tag 3\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 26\t\t\t\n      PUSH [tag] 27\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 28\t\t\t\n      JUMP \t\t\t\n    tag 27\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 29\t\t\t\n      JUMP \t\t\t\n    tag 26\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\td, bool isFree\n      ISZERO \t\t\td, bool isFree\n      ISZERO \t\t\t tokenId, bool isFree)\n      DUP2 \t\t\texed user, uint256 tokenId, bo...\n      MSTORE \t\t\texed user, uint256 tokenId, bo...\n      PUSH 20\t\t\t(a\n      ADD \t\t\tevent NFTMinted(ad\n    tag 30\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 4\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 32\t\t\t\n      PUSH [tag] 33\t\t\t\n      JUMP \t\t\t\n    tag 32\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 30\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 35\t\t\t\n      JUMP \t\t\t\n    tag 5\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 36\t\t\t\n      PUSH [tag] 37\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 38\t\t\t\n      JUMP \t\t\t\n    tag 37\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 39\t\t\t\n      JUMP \t\t\t\n    tag 36\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 30\t\t\t\n      JUMP \t\t\t\n    tag 6\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 42\t\t\t\n      PUSH [tag] 43\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 44\t\t\t\n      JUMP \t\t\t\n    tag 43\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 45\t\t\t\n      JUMP \t\t\t\n    tag 42\t\t\t\n      JUMPDEST \t\t\t\n      STOP \t\t\t\n    tag 7\t\t\tfunction mint() external {\\n  ...\n      JUMPDEST \t\t\tfunction mint() external {\\n  ...\n      PUSH [tag] 42\t\t\tfunction mint() external {\\n  ...\n      PUSH [tag] 47\t\t\tfunction mint() external {\\n  ...\n      JUMP \t\t\tfunction mint() external {\\n  ...\n    tag 8\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 42\t\t\t\n      PUSH [tag] 49\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 50\t\t\t\n      JUMP \t\t\t\n    tag 49\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 51\t\t\t\n      JUMP \t\t\t\n    tag 9\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 42\t\t\t\n      PUSH [tag] 53\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 50\t\t\t\n      JUMP \t\t\t\n    tag 53\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 54\t\t\t\n      JUMP \t\t\t\n    tag 10\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 36\t\t\t\n      PUSH [tag] 56\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 38\t\t\t\n      JUMP \t\t\t\n    tag 56\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 57\t\t\t\n      JUMP \t\t\t\n    tag 11\t\t\tuint256 public immutable NFT_P...\n      JUMPDEST \t\t\tuint256 public immutable NFT_P...\n      PUSH [tag] 59\t\t\tuint256 public immutable NFT_P...\n      PUSHIMMUTABLE 2948\t\t\tuint256 public immutable NFT_P...\n      DUP2 \t\t\tuint256 public immutable NFT_P...\n      JUMP \t\t\tuint256 public immutable NFT_P...\n    tag 59\t\t\tuint256 public immutable NFT_P...\n      JUMPDEST \t\t\tuint256 public immutable NFT_P...\n      PUSH 40\t\t\tuint256 public immutable NFT_P...\n      MLOAD \t\t\tuint256 public immutable NFT_P...\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 30\t\t\tuint256 public immutable NFT_P...\n      JUMP \t\t\t\n    tag 12\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 59\t\t\t\n      PUSH [tag] 64\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 65\t\t\t\n      JUMP \t\t\t\n    tag 64\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 66\t\t\t\n      JUMP \t\t\t\n    tag 13\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 42\t\t\t\n      PUSH [tag] 69\t\t\t\n      JUMP \t\t\t\n    tag 14\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 6\t\t\t\n      SLOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      PUSH [tag] 36\t\t\t\n      JUMP \t\t\t\n    tag 15\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 32\t\t\t\n      PUSH [tag] 74\t\t\t\n      JUMP \t\t\t\n    tag 16\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 42\t\t\t\n      PUSH [tag] 77\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 78\t\t\t\n      JUMP \t\t\t\n    tag 77\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 79\t\t\t\n      JUMP \t\t\t\n    tag 17\t\t\tmapping(address => uint256) pu...\n      JUMPDEST \t\t\tmapping(address => uint256) pu...\n      PUSH [tag] 59\t\t\tmapping(address => uint256) pu...\n      PUSH [tag] 81\t\t\tmapping(address => uint256) pu...\n      CALLDATASIZE \t\t\tmapping(address => uint256) pu...\n      PUSH 4\t\t\tmapping(address => uint256) pu...\n      PUSH [tag] 65\t\t\tmapping(address => uint256) pu...\n      JUMP \t\t\tmapping(address => uint256) pu...\n    tag 81\t\t\tmapping(address => uint256) pu...\n      JUMPDEST \t\t\tmapping(address => uint256) pu...\n      PUSH 9\t\t\tmapping(address => uint256) pu...\n      PUSH 20\t\t\tmapping(address => uint256) pu...\n      MSTORE \t\t\tmapping(address => uint256) pu...\n      PUSH 0\t\t\tmapping(address => uint256) pu...\n      SWAP1 \t\t\tmapping(address => uint256) pu...\n      DUP2 \t\t\tmapping(address => uint256) pu...\n      MSTORE \t\t\tmapping(address => uint256) pu...\n      PUSH 40\t\t\tmapping(address => uint256) pu...\n      SWAP1 \t\t\tmapping(address => uint256) pu...\n      KECCAK256 \t\t\tmapping(address => uint256) pu...\n      SLOAD \t\t\tmapping(address => uint256) pu...\n      DUP2 \t\t\tmapping(address => uint256) pu...\n      JUMP \t\t\tmapping(address => uint256) pu...\n    tag 18\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 42\t\t\t\n      PUSH [tag] 85\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 86\t\t\t\n      JUMP \t\t\t\n    tag 85\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 87\t\t\t\n      JUMP \t\t\t\n    tag 19\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 32\t\t\t\n      PUSH [tag] 89\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 38\t\t\t\n      JUMP \t\t\t\n    tag 89\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 90\t\t\t\n      JUMP \t\t\t\n    tag 20\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 26\t\t\t\n      PUSH [tag] 93\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 94\t\t\t\n      JUMP \t\t\t\n    tag 93\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 95\t\t\t\n      JUMP \t\t\t\n    tag 21\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 42\t\t\t\n      PUSH [tag] 98\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 65\t\t\t\n      JUMP \t\t\t\n    tag 98\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 99\t\t\t\n      JUMP \t\t\t\n    tag 22\t\t\tmapping(address => uint256) pu...\n      JUMPDEST \t\t\tmapping(address => uint256) pu...\n      PUSH [tag] 59\t\t\tmapping(address => uint256) pu...\n      PUSH [tag] 101\t\t\tmapping(address => uint256) pu...\n      CALLDATASIZE \t\t\tmapping(address => uint256) pu...\n      PUSH 4\t\t\tmapping(address => uint256) pu...\n      PUSH [tag] 65\t\t\tmapping(address => uint256) pu...\n      JUMP \t\t\tmapping(address => uint256) pu...\n    tag 101\t\t\tmapping(address => uint256) pu...\n      JUMPDEST \t\t\tmapping(address => uint256) pu...\n      PUSH 8\t\t\tmapping(address => uint256) pu...\n      PUSH 20\t\t\tmapping(address => uint256) pu...\n      MSTORE \t\t\tmapping(address => uint256) pu...\n      PUSH 0\t\t\tmapping(address => uint256) pu...\n      SWAP1 \t\t\tmapping(address => uint256) pu...\n      DUP2 \t\t\tmapping(address => uint256) pu...\n      MSTORE \t\t\tmapping(address => uint256) pu...\n      PUSH 40\t\t\tmapping(address => uint256) pu...\n      SWAP1 \t\t\tmapping(address => uint256) pu...\n      KECCAK256 \t\t\tmapping(address => uint256) pu...\n      SLOAD \t\t\tmapping(address => uint256) pu...\n      DUP2 \t\t\tmapping(address => uint256) pu...\n      JUMP \t\t\tmapping(address => uint256) pu...\n    tag 29\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      NOT \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH 80AC58CD\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      EQ \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 105\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      NOT \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH 5B5E139F\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      EQ \t\t\t\n    tag 105\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 107\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH 1FFC9A7\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      NOT \t\t\t\n      DUP4 \t\t\ter, newTokenId);\\n\\n        la...\n      AND \t\t\ter, newTokenId);\\n\\n        la...\n      EQ \t\t\ter, newTokenId);\\n\\n        la...\n    tag 107\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 33\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 110\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 111\t\t\t\n      JUMP \t\t\t\n    tag 110\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH 1F\t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      DIV \t\t\t\n      MUL \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 112\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 111\t\t\t\n      JUMP \t\t\t\n    tag 112\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 113\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      PUSH 1F\t\t\t\n      LT \t\t\t\n      PUSH [tag] 114\t\t\t\n      JUMPI \t\t\t\n      PUSH 100\t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      SLOAD \t\t\t\n      DIV \t\t\t\n      MUL \t\t\t\n      DUP4 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      PUSH [tag] 113\t\t\t\n      JUMP \t\t\t\n    tag 114\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n    tag 115\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      SLOAD \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      PUSH 1\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      GT \t\t\t\n      PUSH [tag] 115\t\t\t\n      JUMPI \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      SUB \t\t\t\n      PUSH 1F\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n    tag 113\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 39\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 117\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 118\t\t\t\n      JUMP \t\t\t\n    tag 117\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      PUSH 20\t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      PUSH [tag] 107\t\t\t\n      JUMP \t\t\t\n    tag 45\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 122\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      CALLER \t\t\t\\n    }\\n\\n  \n      PUSH [tag] 125\t\t\t\n      JUMP \t\t\t\n    tag 122\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 47\t\t\tfunction mint() external {\\n  ...\n      JUMPDEST \t\t\tfunction mint() external {\\n  ...\n      PUSH 7\t\t\t_tokenIds\n      DUP1 \t\t\t_tokenIds++\n      SLOAD \t\t\t_tokenIds++\n      SWAP1 \t\t\t_tokenIds++\n      PUSH 0\t\t\t_tokenIds\n      PUSH [tag] 127\t\t\t_tokenIds++\n      DUP4 \t\t\t_tokenIds++\n      PUSH [tag] 128\t\t\t_tokenIds++\n      JUMP \t\t\t_tokenIds++\n    tag 127\t\t\t_tokenIds++\n      JUMPDEST \t\t\t_tokenIds++\n      SWAP1 \t\t\t_tokenIds++\n      SWAP2 \t\t\t_tokenIds++\n      SSTORE \t\t\t_tokenIds++\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 7\t\t\t_tokenIds\n      SLOAD \t\t\t_tokenIds\n      PUSH [tag] 129\t\t\t_safeMint(msg.sender, newToken...\n      CALLER \t\t\tmsg.sender\n      DUP3 \t\t\t_tokenIds\n      PUSH [tag] 130\t\t\t_safeMint\n      JUMP \t\t\t_safeMint(msg.sender, newToken...\n    tag 129\t\t\t_safeMint(msg.sender, newToken...\n      JUMPDEST \t\t\t_safeMint(msg.sender, newToken...\n      CALLER \t\t\tmsg.sender\n      PUSH 0\t\t\tlastFreeMint[msg.sender]\n      DUP2 \t\t\tlastFreeMint[msg.sender]\n      DUP2 \t\t\tlastFreeMint[msg.sender]\n      MSTORE \t\t\tlastFreeMint[msg.sender]\n      PUSH 9\t\t\tlastFreeMint\n      PUSH 20\t\t\tlastFreeMint[msg.sender]\n      SWAP1 \t\t\tlastFreeMint[msg.sender]\n      DUP2 \t\t\tlastFreeMint[msg.sender]\n      MSTORE \t\t\tlastFreeMint[msg.sender]\n      PUSH 40\t\t\tlastFreeMint[msg.sender]\n      SWAP2 \t\t\tlastFreeMint[msg.sender]\n      DUP3 \t\t\tlastFreeMint[msg.sender]\n      SWAP1 \t\t\tlastFreeMint[msg.sender]\n      KECCAK256 \t\t\tlastFreeMint[msg.sender]\n      TIMESTAMP \t\t\tblock.timestamp\n      SWAP1 \t\t\tlastFreeMint[msg.sender] = blo...\n      SSTORE \t\t\tlastFreeMint[msg.sender] = blo...\n      DUP2 \t\t\tNFTMinted(msg.sender, newToken...\n      MLOAD \t\t\tNFTMinted(msg.sender, newToken...\n      DUP5 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\ttrue\n      SWAP2 \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 8FA3FF725D2F7190C5E5DD9BC88F241A72B239E127E347DCCDFC28E44E5E0963\t\t\tNFTMinted(msg.sender, newToken...\n      SWAP2 \t\t\tNFTMinted(msg.sender, newToken...\n      ADD \t\t\t\n      PUSH 40\t\t\tNFTMinted(msg.sender, newToken...\n      MLOAD \t\t\tNFTMinted(msg.sender, newToken...\n      DUP1 \t\t\tNFTMinted(msg.sender, newToken...\n      SWAP2 \t\t\tNFTMinted(msg.sender, newToken...\n      SUB \t\t\tNFTMinted(msg.sender, newToken...\n      SWAP1 \t\t\tNFTMinted(msg.sender, newToken...\n      LOG2 \t\t\tNFTMinted(msg.sender, newToken...\n      POP \t\t\t{\\n        _tokenIds++;\\n     ...\n      JUMP \t\t\tfunction mint() external {\\n  ...\n    tag 51\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 134\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 32505749\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n    tag 135\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 134\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 136\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      CALLER \t\t\t\\n    }\\n\\n  \n      PUSH [tag] 138\t\t\t\n      JUMP \t\t\t\n    tag 136\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP4 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 139\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 64283D7B\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP1 \t\t\t\n      DUP7 \t\t\t\n      AND \t\t\t\n      PUSH 4\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH 44\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 64\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 135\t\t\t\n      JUMP \t\t\t\n    tag 139\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 54\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 143\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      PUSH [tag] 87\t\t\t\n      JUMP \t\t\t\n    tag 143\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 57\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 107\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 118\t\t\t\n      JUMP \t\t\t\n    tag 66\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 147\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 22718AD9\t\t\t\n      PUSH E2\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 135\t\t\t\n      JUMP \t\t\t\n    tag 147\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 3\t\t\t\n      PUSH 20\t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 69\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 150\t\t\t\n      PUSH [tag] 151\t\t\t\n      JUMP \t\t\t\n    tag 150\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 153\t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 154\t\t\t\n      JUMP \t\t\t\n    tag 153\t\t\t\n      JUMPDEST \t\t\t\n      JUMP \t\t\t\n    tag 74\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH 1\t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 110\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 111\t\t\t\n      JUMP \t\t\t\n    tag 79\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 122\t\t\t\n      CALLER \t\t\t\\n    }\\n\\n  \n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 165\t\t\t\n      JUMP \t\t\t\n    tag 87\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 167\t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 51\t\t\t\n      JUMP \t\t\t\n    tag 167\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 139\t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 169\t\t\t\n      JUMP \t\t\t\n    tag 90\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH [tag] 171\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 118\t\t\t\n      JUMP \t\t\t\n    tag 171\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 172\t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 172\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      GT \t\t\t\n      PUSH [tag] 174\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      PUSH [tag] 175\t\t\t\n      JUMP \t\t\t\n    tag 174\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 176\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 177\t\t\t\n      JUMP \t\t\t\n    tag 176\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 178\t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 179\t\t\t\n      JUMP \t\t\t\n    tag 178\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      DUP4 \t\t\t\n      SUB \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n    tag 175\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 95\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 5\t\t\t\n      PUSH 20\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP4 \t\t\t\n      SWAP1 \t\t\t\n      SWAP5 \t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      PUSH FF\t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 99\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 182\t\t\t\n      PUSH [tag] 151\t\t\t\n      JUMP \t\t\t\n    tag 182\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 184\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 1E4FBDF7\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 135\t\t\t\n      JUMP \t\t\t\n    tag 184\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 186\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 154\t\t\t\n      JUMP \t\t\t\n    tag 186\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 118\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 2\t\t\t\n      PUSH 20\t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP2 \t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 107\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 7E273289\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 135\t\t\t\n      JUMP \t\t\t\n    tag 125\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 143\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH 1\t\t\t\n      PUSH [tag] 197\t\t\t\n      JUMP \t\t\t\n    tag 130\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 122\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      PUSH [tag] 200\t\t\t\n      JUMP \t\t\t\n    tag 138\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 2\t\t\t\n      PUSH 20\t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP2 \t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 204\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 204\t\t\t\n      DUP2 \t\t\t\n      DUP5 \t\t\t\n      DUP7 \t\t\t\n      PUSH [tag] 205\t\t\t\n      JUMP \t\t\t\n    tag 204\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 206\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 207\t\t\t\n      PUSH 0\t\t\t\n      DUP6 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 197\t\t\t\n      JUMP \t\t\t\n    tag 207\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 3\t\t\t\n      PUSH 20\t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH 0\t\t\t\n      NOT \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n    tag 206\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP6 \t\t\t\n      AND \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 208\t\t\t\n      JUMPI \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP6 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 3\t\t\t\n      PUSH 20\t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH 1\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n    tag 208\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP5 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 2\t\t\t\n      PUSH 20\t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      KECCAK256 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP10 \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      OR \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      SSTORE \t\t\t\n      SWAP2 \t\t\t\n      MLOAD \t\t\t\n      DUP8 \t\t\t\n      SWAP4 \t\t\t\n      SWAP2 \t\t\t\n      DUP6 \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      PUSH DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF\t\t\t\n      SWAP2 \t\t\t\n      LOG4 \t\t\t\n      SWAP5 \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 151\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 6\t\t\t\n      SLOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      CALLER \t\t\t\\n    }\\n\\n  \n      EQ \t\t\t\n      PUSH [tag] 153\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 118CDAA7\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      CALLER \t\t\t\\n    }\\n\\n  \n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 135\t\t\t\n      JUMP \t\t\t\n    tag 154\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 6\t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      NOT \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      OR \t\t\t\n      SWAP1 \t\t\t\n      SWAP4 \t\t\t\n      SSTORE \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      PUSH 8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0\t\t\t\n      SWAP1 \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      LOG3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 165\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 217\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH B611743\t\t\t\n      PUSH E3\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 135\t\t\t\n      JUMP \t\t\t\n    tag 217\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 5\t\t\t\n      PUSH 20\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP5 \t\t\t\n      DUP8 \t\t\t\n      AND \t\t\t\n      DUP1 \t\t\t\n      DUP5 \t\t\t\n      MSTORE \t\t\t\n      SWAP5 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH FF\t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      DUP7 \t\t\t\n      ISZERO \t\t\t\n      ISZERO \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      OR \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      SSTORE \t\t\t\n      SWAP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\texed user, uint256 tokenId, bo...\n      DUP3 \t\t\texed user, uint256 tokenId, bo...\n      MSTORE \t\t\texed user, uint256 tokenId, bo...\n      PUSH 17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31\t\t\t\n      SWAP2 \t\t\t\n      ADD \t\t\tevent NFTMinted(ad\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      LOG3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 169\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      EXTCODESIZE \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 139\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH A85BD01\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP5 \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      PUSH 150B7A02\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 223\t\t\t\n      SWAP1 \t\t\t\n      CALLER \t\t\t\\n    }\\n\\n  \n      SWAP1 \t\t\t\\n    }\\n\\n  \n      DUP9 \t\t\t\n      SWAP1 \t\t\t\n      DUP8 \t\t\t\n      SWAP1 \t\t\t\n      DUP8 \t\t\t\n      SWAP1 \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 224\t\t\t\n      JUMP \t\t\t\n    tag 223\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      PUSH 0\t\t\t\n      DUP8 \t\t\t\n      GAS \t\t\t\n      CALL \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 225\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 1F\t\t\t\n      RETURNDATASIZE \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      PUSH 1F\t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 226\t\t\t\n      SWAP2 \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 227\t\t\t\n      JUMP \t\t\t\n    tag 226\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n    tag 225\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 228\t\t\t\n      JUMPI \t\t\t\n      RETURNDATASIZE \t\t\t\n      DUP1 \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 233\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH 1F\t\t\t\n      NOT \t\t\t\n      PUSH 3F\t\t\t\n      RETURNDATASIZE \t\t\t\n      ADD \t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      RETURNDATASIZE \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      RETURNDATASIZE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      RETURNDATACOPY \t\t\t\n      PUSH [tag] 232\t\t\t\n      JUMP \t\t\t\n    tag 233\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n    tag 232\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 0\t\t\t\n      SUB \t\t\t\n      PUSH [tag] 234\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 32505749\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP6 \t\t\t\n      AND \t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 135\t\t\t\n      JUMP \t\t\t\n    tag 234\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      DUP2 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      REVERT \t\t\t\n    tag 228\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      NOT \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      PUSH A85BD01\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 238\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 32505749\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP6 \t\t\t\n      AND \t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 135\t\t\t\n      JUMP \t\t\t\n    tag 238\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 177\t\t\ts initialOwner\\n    ) ERC721(\"...\n      JUMPDEST \t\t\ts initialOwner\\n    ) ERC721(\"...\n      PUSH 60\t\t\tinitialOwner)\n      PUSH 0\t\t\t\\n    function \n      PUSH [tag] 242\t\t\tt() external {\\n  \n      DUP4 \t\t\tl {\\n \n      PUSH [tag] 243\t\t\tt() extern\n      JUMP \t\t\tt() external {\\n  \n    tag 242\t\t\tt() external {\\n  \n      JUMPDEST \t\t\tt() external {\\n  \n      PUSH 1\t\t\t \n      ADD \t\t\tt() external {\\n      \n      SWAP1 \t\t\t\\n    function mint() external...\n      POP \t\t\t\\n    function mint() external...\n      PUSH 0\t\t\t\\n        uint256 new\n      DUP2 \t\t\tenIds;\n      PUSH FFFFFFFFFFFFFFFF\t\t\tenId = _tokenIds;\\n\n      DUP2 \t\t\tenId = _tokenIds;\\n\n      GT \t\t\tenId = _tokenIds;\\n\n      ISZERO \t\t\tenId = _tokenIds;\\n\n      PUSH [tag] 245\t\t\tenId = _tokenIds;\\n\n      JUMPI \t\t\tenId = _tokenIds;\\n\n      PUSH [tag] 245\t\t\tenId = _tokenIds;\\n\n      PUSH [tag] 246\t\t\tenId = _tokenIds;\\n\n      JUMP \t\t\tenId = _tokenIds;\\n\n    tag 245\t\t\tenId = _tokenIds;\\n\n      JUMPDEST \t\t\tenId = _tokenIds;\\n\n      PUSH 40\t\t\tenId = _tokenIds;\\n\n      MLOAD \t\t\tenId = _tokenIds;\\n\n      SWAP1 \t\t\tenId = _tokenIds;\\n\n      DUP1 \t\t\tenId = _tokenIds;\\n\n      DUP3 \t\t\tenId = _tokenIds;\\n\n      MSTORE \t\t\tenId = _tokenIds;\\n\n      DUP1 \t\t\tenId = _tokenIds;\\n\n      PUSH 1F\t\t\tenId = _tokenIds;\\n\n      ADD \t\t\tenId = _tokenIds;\\n\n      PUSH 1F\t\t\tenId = _tokenIds;\\n\n      NOT \t\t\tenId = _tokenIds;\\n\n      AND \t\t\tenId = _tokenIds;\\n\n      PUSH 20\t\t\tenId = _tokenIds;\\n\n      ADD \t\t\tenId = _tokenIds;\\n\n      DUP3 \t\t\tenId = _tokenIds;\\n\n      ADD \t\t\tenId = _tokenIds;\\n\n      PUSH 40\t\t\tenId = _tokenIds;\\n\n      MSTORE \t\t\tenId = _tokenIds;\\n\n      DUP1 \t\t\tenId = _tokenIds;\\n\n      ISZERO \t\t\tenId = _tokenIds;\\n\n      PUSH [tag] 247\t\t\tenId = _tokenIds;\\n\n      JUMPI \t\t\tenId = _tokenIds;\\n\n      PUSH 20\t\t\tenId = _tokenIds;\\n\n      DUP3 \t\t\tenId = _tokenIds;\\n\n      ADD \t\t\tenId = _tokenIds;\\n\n      DUP2 \t\t\tenId = _tokenIds;\\n\n      DUP1 \t\t\tenId = _tokenIds;\\n\n      CALLDATASIZE \t\t\tenId = _tokenIds;\\n\n      DUP4 \t\t\tenId = _tokenIds;\\n\n      CALLDATACOPY \t\t\tenId = _tokenIds;\\n\n      ADD \t\t\tenId = _tokenIds;\\n\n      SWAP1 \t\t\tenId = _tokenIds;\\n\n      POP \t\t\t\n    tag 247\t\t\tenId = _tokenIds;\\n\n      JUMPDEST \t\t\tenId = _tokenIds;\\n\n      POP \t\t\t\n      SWAP1 \t\t\t\\n        uint256 newTokenId =...\n      POP \t\t\t\n      DUP2 \t\t\tsg.sender, newTokenId, true)\n      DUP2 \t\t\tsg.sender, newTokenId, true)\n      ADD \t\t\tsg.sender, newTokenId, true)\n      PUSH 20\t\t\tke\n      ADD \t\t\tsg.sender, newTokenId, true)\n    tag 248\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      NOT \t\t\t\n      ADD \t\t\t\n      PUSH 181899199A1A9B1B9C1CB0B131B232B3\t\t\t\n      PUSH 81\t\t\t\n      SHL \t\t\t\n      PUSH A\t\t\t\n      DUP7 \t\t\t\n      MOD \t\t\t\n      BYTE \t\t\t\n      DUP2 \t\t\t\n      MSTORE8 \t\t\t\n      PUSH A\t\t\t\n      DUP6 \t\t\t\n      DIV \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 248\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\ts initialOwner\\n    ) ERC721(\"...\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\ts initialOwner\\n    ) ERC721(\"...\n    tag 197\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 256\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      ISZERO \t\t\t\n      ISZERO \t\t\t\n    tag 256\t\t\t\n      JUMPDEST \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 257\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 258\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 118\t\t\t\n      JUMP \t\t\t\n    tag 258\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      ISZERO \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 259\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      ISZERO \t\t\t\n    tag 259\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 260\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH [tag] 261\t\t\t\n      DUP2 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 95\t\t\t\n      JUMP \t\t\t\n    tag 261\t\t\t\n      JUMPDEST \t\t\t\n      ISZERO \t\t\t\n    tag 260\t\t\t\n      JUMPDEST \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 262\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH A9FBF51F\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP5 \t\t\t\n      AND \t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 135\t\t\t\n      JUMP \t\t\t\n    tag 262\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 264\t\t\t\n      JUMPI \t\t\t\n      DUP4 \t\t\t\n      DUP6 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      PUSH 8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      LOG4 \t\t\t\n    tag 264\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n    tag 257\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      PUSH 20\t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      OR \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      JUMP \t\t\t\n    tag 200\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 266\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 267\t\t\t\n      JUMP \t\t\t\n    tag 266\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 143\t\t\t\n      PUSH 0\t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 169\t\t\t\n      JUMP \t\t\t\n    tag 205\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 270\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 271\t\t\t\n      JUMP \t\t\t\n    tag 270\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 143\t\t\t\n      JUMPI \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 273\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 7E273289\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 135\t\t\t\n      JUMP \t\t\t\n    tag 273\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 177E802F\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 44\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 135\t\t\t\n      JUMP \t\t\t\n    tag 243\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 184F03E93FF9F4DAA797ED6E38ED64BF6A1F01\t\t\t\n      PUSH 40\t\t\t\n      SHL \t\t\t\n      DUP4 \t\t\t\n      LT \t\t\t\n      PUSH [tag] 279\t\t\t\n      JUMPI \t\t\t\n      PUSH 184F03E93FF9F4DAA797ED6E38ED64BF6A1F01\t\t\t\n      PUSH 40\t\t\t\n      SHL \t\t\t\n      DUP4 \t\t\t\n      DIV \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      ADD \t\t\t\n    tag 279\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4EE2D6D415B85ACEF8100000000\t\t\t\n      DUP4 \t\t\t\n      LT \t\t\t\n      PUSH [tag] 282\t\t\t\n      JUMPI \t\t\t\n      PUSH 4EE2D6D415B85ACEF8100000000\t\t\t\n      DUP4 \t\t\t\n      DIV \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n    tag 282\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 2386F26FC10000\t\t\t\n      DUP4 \t\t\t\n      LT \t\t\t\n      PUSH [tag] 285\t\t\t\n      JUMPI \t\t\t\n      PUSH 2386F26FC10000\t\t\t\n      DUP4 \t\t\t\n      DIV \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH 10\t\t\t\n      ADD \t\t\t\n    tag 285\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 5F5E100\t\t\t\n      DUP4 \t\t\t\n      LT \t\t\t\n      PUSH [tag] 288\t\t\t\n      JUMPI \t\t\t\n      PUSH 5F5E100\t\t\t\n      DUP4 \t\t\t\n      DIV \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH 8\t\t\t\n      ADD \t\t\t\n    tag 288\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 2710\t\t\t\n      DUP4 \t\t\t\n      LT \t\t\t\n      PUSH [tag] 291\t\t\t\n      JUMPI \t\t\t\n      PUSH 2710\t\t\t\n      DUP4 \t\t\t\n      DIV \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n    tag 291\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 64\t\t\t\n      DUP4 \t\t\t\n      LT \t\t\t\n      PUSH [tag] 294\t\t\t\n      JUMPI \t\t\t\n      PUSH 64\t\t\t\n      DUP4 \t\t\t\n      DIV \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH 2\t\t\t\n      ADD \t\t\t\n    tag 294\t\t\t\n      JUMPDEST \t\t\t\n      PUSH A\t\t\t\n      DUP4 \t\t\t\n      LT \t\t\t\n      PUSH [tag] 107\t\t\t\n      JUMPI \t\t\t\n      PUSH 1\t\t\t\n      ADD \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 267\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 299\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 32505749\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 135\t\t\t\n      JUMP \t\t\t\n    tag 299\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 301\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 138\t\t\t\n      JUMP \t\t\t\n    tag 301\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 143\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 39E35637\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 135\t\t\t\n      JUMP \t\t\t\n    tag 271\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      ISZERO \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 308\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      DUP5 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 307\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH [tag] 307\t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 95\t\t\t\n      JUMP \t\t\t\n    tag 307\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 308\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      PUSH 20\t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP5 \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n    tag 308\t\t\t\n      JUMPDEST \t\t\t\n      SWAP5 \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 310\t\t\te-Identifier: MIT\\npragma soli...\n      JUMPDEST \t\t\te-Identifier: MIT\\npragma soli...\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      NOT \t\t\t\n      DUP2 \t\t\t/token/ERC721/ERC721.sol\";\\nim...\n      AND \t\t\t/token/ERC721/ERC721.sol\";\\nim...\n      DUP2 \t\t\t/contracts/token/ERC721/ERC721...\n      EQ \t\t\t/contracts/token/ERC721/ERC721...\n      PUSH [tag] 186\t\t\tenzeppelin/contracts/token/ERC...\n      JUMPI \t\t\tenzeppelin/contracts/token/ERC...\n      PUSH 0\t\t\tn\n      DUP1 \t\t\te\n      REVERT \t\t\tpenzeppelin/\n    tag 28\t\t\tess/Ownable.sol\";\\n\\ncontract ...\n      JUMPDEST \t\t\tess/Ownable.sol\";\\n\\ncontract ...\n      PUSH 0\t\t\t uint2\n      PUSH 20\t\t\tbl\n      DUP3 \t\t\tublic imm\n      DUP5 \t\t\tuint256\n      SUB \t\t\t    uint256 public immu\n      SLT \t\t\tds;\\n    uint256 public immuta...\n      ISZERO \t\t\tenIds;\\n    uint256 public imm...\n      PUSH [tag] 318\t\t\tenIds;\\n    uint256 public imm...\n      JUMPI \t\t\tenIds;\\n    uint256 public imm...\n      PUSH 0\t\t\t/\n      DUP1 \t\t\t;\n      REVERT \t\t\tT_PRICE; // \n    tag 318\t\t\tenIds;\\n    uint256 public imm...\n      JUMPDEST \t\t\tenIds;\\n    uint256 public imm...\n      DUP2 \t\t\t56) publi\n      CALLDATALOAD \t\t\tress => uint256) public\n      PUSH [tag] 175\t\t\tount;\\n    mapping(address => ...\n      DUP2 \t\t\ts => \n      PUSH [tag] 310\t\t\tount;\\n    mapping(address => ...\n      JUMP \t\t\tount;\\n    mapping(address => ...\n    tag 311\t\t\tructor(\\n        uint256 price...\n      JUMPDEST \t\t\tructor(\\n        uint256 price...\n      PUSH 0\t\t\t\"\n    tag 322\t\t\tnable(initialOwner) {\\n       ...\n      JUMPDEST \t\t\tnable(initialOwner) {\\n       ...\n      DUP4 \t\t\twner) \n      DUP2 \t\t\ta\n      LT \t\t\titialOwner) {\n      ISZERO \t\t\tnable(initialOwner) {\\n       ...\n      PUSH [tag] 324\t\t\tnable(initialOwner) {\\n       ...\n      JUMPI \t\t\tnable(initialOwner) {\\n       ...\n      DUP2 \t\t\t     _token\n      DUP2 \t\t\t     _token\n      ADD \t\t\t     _token\n      MLOAD \t\t\t {\\n        _tokenI\n      DUP4 \t\t\tnt() extern\n      DUP3 \t\t\tnt() extern\n      ADD \t\t\tnt() extern\n      MSTORE \t\t\ttion mint() external {\\n      ...\n      PUSH 20\t\t\tIC\n      ADD \t\t\t NFT_PRICE\n      PUSH [tag] 322\t\t\tnable(initialOwner) {\\n       ...\n      JUMP \t\t\tnable(initialOwner) {\\n       ...\n    tag 324\t\t\tnable(initialOwner) {\\n       ...\n      JUMPDEST \t\t\tnable(initialOwner) {\\n       ...\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\\n\n      SWAP2 \t\t\tkenId = _tokenId\n      ADD \t\t\tkenId = _tokenId\n      MSTORE \t\t\t6 newTokenId = _tokenIds;\\n \n      JUMP \t\t\tructor(\\n        uint256 price...\n    tag 312\t\t\teMint(msg.sender, newTokenId);...\n      JUMPDEST \t\t\teMint(msg.sender, newTokenId);...\n      PUSH 0\t\t\tstF\n      DUP2 \t\t\tmp;\\n \n      MLOAD \t\t\timestamp;\\n  \n      DUP1 \t\t\tmsg.se\n      DUP5 \t\t\tnte\n      MSTORE \t\t\tt NFTMinted(msg.sen\n      PUSH [tag] 326\t\t\tokenId, true);\\n    }\\n}\n      DUP2 \t\t\t\n      PUSH 20\t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 311\t\t\tokenId, true);\\n    }\\n}\n      JUMP \t\t\tokenId, true);\\n    }\\n}\n    tag 326\t\t\tokenId, true);\\n    }\\n}\n      JUMPDEST \t\t\tokenId, true);\\n    }\\n}\n      PUSH 1F\t\t\t\n      ADD \t\t\t\n      PUSH 1F\t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\teMint(msg.sender, newTokenId);...\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\teMint(msg.sender, newTokenId);...\n    tag 35\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 175\t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 312\t\t\t\n      JUMP \t\t\t\n    tag 38\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 330\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 330\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 313\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 333\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 333\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 44\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      DUP6 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 335\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 335\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 336\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 313\t\t\t\n      JUMP \t\t\t\n    tag 336\t\t\t\n      JUMPDEST \t\t\t\n      SWAP5 \t\t\t\n      PUSH 20\t\t\t\n      SWAP4 \t\t\t\n      SWAP1 \t\t\t\n      SWAP4 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 50\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      PUSH 60\t\t\t\n      DUP5 \t\t\t\n      DUP7 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 338\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 338\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 339\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 313\t\t\t\n      JUMP \t\t\t\n    tag 339\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 340\t\t\t\n      PUSH 20\t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 313\t\t\t\n      JUMP \t\t\t\n    tag 340\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      JUMP \t\t\t\n    tag 65\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 343\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 343\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 175\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 313\t\t\t\n      JUMP \t\t\t\n    tag 78\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      DUP6 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 346\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 346\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 347\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 313\t\t\t\n      JUMP \t\t\t\n    tag 347\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      ISZERO \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 348\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 348\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 246\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B71\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 41\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 86\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 80\t\t\t\n      DUP6 \t\t\t\n      DUP8 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 351\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 351\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 352\t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 313\t\t\t\n      JUMP \t\t\t\n    tag 352\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 353\t\t\t\n      PUSH 20\t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 313\t\t\t\n      JUMP \t\t\t\n    tag 353\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH 60\t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH FFFFFFFFFFFFFFFF\t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 354\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 354\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP8 \t\t\t\n      PUSH 1F\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      SLT \t\t\t\n      PUSH [tag] 355\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 355\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      CALLDATALOAD \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 357\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 357\t\t\t\n      PUSH [tag] 246\t\t\t\n      JUMP \t\t\t\n    tag 357\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 1F\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      PUSH 1F\t\t\t\n      NOT \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      PUSH 3F\t\t\t\n      ADD \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP4 \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      DUP2 \t\t\t\n      DUP4 \t\t\t\n      LT \t\t\t\n      OR \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 359\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 359\t\t\t\n      PUSH [tag] 246\t\t\t\n      JUMP \t\t\t\n    tag 359\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP3 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      DUP11 \t\t\t\n      PUSH 20\t\t\t\n      DUP5 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      ADD \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 360\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 360\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      PUSH 20\t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      CALLDATACOPY \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP5 \t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      SWAP6 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP6 \t\t\t\n      SWAP2 \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 94\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      DUP6 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 362\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 362\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 363\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 313\t\t\t\n      JUMP \t\t\t\n    tag 363\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 364\t\t\t\n      PUSH 20\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 313\t\t\t\n      JUMP \t\t\t\n    tag 364\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 111\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SHR \t\t\t\n      SWAP1 \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 366\t\t\t\n      JUMPI \t\t\t\n      PUSH 7F\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n    tag 366\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      LT \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 367\t\t\t\n      JUMPI \t\t\t\n      PUSH 4E487B71\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 22\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 367\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 128\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 1\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 369\t\t\t\n      JUMPI \t\t\t\n      PUSH 4E487B71\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 11\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 369\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 179\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 373\t\t\t\n      DUP2 \t\t\t\n      DUP5 \t\t\t\n      PUSH 20\t\t\t\n      DUP9 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 311\t\t\t\n      JUMP \t\t\t\n    tag 373\t\t\t\n      JUMPDEST \t\t\t\n      DUP4 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 374\t\t\t\n      DUP2 \t\t\t\n      DUP4 \t\t\t\n      PUSH 20\t\t\t\n      DUP9 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 311\t\t\t\n      JUMP \t\t\t\n    tag 374\t\t\t\n      JUMPDEST \t\t\t\n      ADD \t\t\t\n      SWAP5 \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 224\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP6 \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      DUP5 \t\t\t\n      AND \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP4 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 80\t\t\t\n      PUSH 60\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 376\t\t\t\n      SWAP1 \t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 312\t\t\t\n      JUMP \t\t\t\n    tag 376\t\t\t\n      JUMPDEST \t\t\t\n      SWAP7 \t\t\t\n      SWAP6 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 227\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 378\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 378\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 175\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 310\t\t\t\n      JUMP \t\t\t\n    .data\n"
}